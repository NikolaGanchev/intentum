{
  "l0": {
    "p1p": "Hello!",
    "p2p": "I am the author of Intentum. My goal is that by the end of this \"course\" you should have all the knowledge you need in computer science and programming to continue learning on your own. The \"course\" is divided into 42 lessons (excluding lesson 0) and 8 tests. This should cover everything you need for a start in programming, and cover all the computer science material that you would learn in most schools. Each lesson has a thematic title indicating what you will be doing in it.",
    "p3p": "The lesson are not complicated and are as simple as possible - I believe anyone can learn to program if the explanation is easy. I myself started from a book about programming in English, from which I understood almost nothing. And there are almost no simple sources in Bulgarian. One day, someone asked me \"How did you learn?\". I started complaining that I had nothing to recommend to them, and suddenly I had the idea to make something myself that I could recommend. And here I am now.",
    "p4p": "To unlock a lesson, you need to pass the previous or press the lock that is located in place of the start button. However, I do not recommend skipping lessons. The idea of unlocking is to be able to be on the same level both on a computer and on a phone, without requiring accounts (and therefore, an internet connection) - not to miss on important material.",
    "p5p": "Lessons also have sections, with a question at the end of each section and a lock hiding the material below. Questions are for self-checking - no matter how you answer, the next section will reveal itself. It's your job to decide if you need another read!",
    "p6p": "I said there are 8 tests. Don't be scared! No matter what you do on a test, you move on to the next lesson. The tests are for self-examination too - to find out the level of your own knowledge and decide if you should continue or go back.",
    "p7p": "As you have probably noticed, self-examination is especially important. As much as you rely on me to have easy and well-written lessons, I rely on you to realize when you need to emphasize on something. Willingness is required by both sides.",
    "p8p": "At the moment, you might imagine programming as some ancient magic used only by Einstein's heirs and those who solve cubic equations on napkins, writing with mud, while climbing Evereset. It's not, and you're not even required to be a particularly good mathematician. However, I suppose I can prove this to you in only one way",
    "p9p": "For now, this is from me. We will meet again in the next lesson. Good luck!",
    "text": "where we will meet for the first time",
    "title": "Lesson 0"
  },
  "l1": {
    "p10p": "156 = 1 * 10^2 + 5 * 10^1 + 6*1",
    "p11p": "However, I can tell you that there is a relationship between all three multipliers - 100, 10 and 1. All three are actually powers of 10. And right now, you might remember something you were told a long time ago - any number raised to the power of 0 is 1. That means 10^0 is 1. Now we get:",
    "p12p": "156 = 1 * 10^2 + 5 * 10^1+ 6*10^0",
    "p13p": "Okay, so let's try a six-digit number:",
    "p14p": "907 156 = 9 * 10^5+ 0 * 10^4 + 7 * 10^3 + 1 * 10^2 + 5 * 10^1 + 6*10^1",
    "p15p": "We could go on, but with each number we'll get something similar. The conclusion is that every number in the decimal number system is equal to the sum of all its digits, where each digit is multiplied by ten to the power of its position. That is what we wrote above, but in words. The position of a digit is determined from right to left - the rightmost digit is 0, each digit after that is 1 greater. For example:",
    "p16p": "1 907 156 - Digit",
    "p17p": "6 543 210 - Position",
    "p18p": "Due to the fact that the digits here are 10 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) and we multiply by a power of 10, we say that we have the decimal number system. And the base is 10.",
    "p19tq": "What would be the base of a number system with only 2 digits?",
    "p1p": "Welcome to the first lesson!",
    "p20fq": "Write down what the number 796 equals relative to the example 156 = 1 * 10^2 + 5 * 10^1 + 6 * 10^0, where \"^\" means \"to the power of\".",
    "p21p": "Having clarified that, let's leave elementary school and return to the present. And here comes the real purpose of the lesson: to understand the binary number system.",
    "p22p": "Everyone knows that computers only understand 0 and 1. They use a number system where there are only two digits - 0 and 1. One 0 or one 1 is a bit. And the base of the system is 2.",
    "p23p": "Only with this information, we can decipher the zeros and ones. For example, we have the number 010. The positions are as follows:",
    "p24p": "210",
    "p25p": "We know that we need the sum of the digits multiplied by the base of the degree position. The base is 2, and we have the positions:",
    "p26p": "010 = 0 * 2^2 + 1 * 2^1 + 0 * 2^0 = 0 * 4 + 1 * 2 + 0 * 1 = 2",
    "p27p": "That was all. We just converted the number 010 (base 2) to a number in base 10 - 2. Let's try something more complicated - 1 byte - so 8 bits, or in other words, 8 digits:",
    "p28p": "10110110 = 1 * 2^7 + 0 * 2^6 + 1 * 2^5 + 1 * 2^4 + 0 * 2^3 + 1 * 2^2 + 1 * 2^1 + 0 * 2^0 =  1 * 128 + 0 * 64 + 1 * 32 + 1 * 16 + 0 * 8 + 1 * 4 + 1 * 2 + 0 * 1 = 128 + 32 + 16 + 4 + 2 = 182",
    "p29p": "And now we have converted this long number into decimal.",
    "p2p": "I guess the title of the lesson surprised you, and now you're wondering \"How come it's not 10 digits? My elementary school teacher didn't stop repeating that there are 10 digits.\" Well, to answer you, I first have to take you back to the afromentioned elementary school.",
    "p30fq": "Convert 11101110 to decimal",
    "p31tq": "110 in binary is equal to how much in decimal?",
    "p32p": "Let's do the opposite and take the number 156 again. This time, we will not multiply by 10, but divide by 10 with remainder. We get:",
    "p33p": "56 / 10 = 15  (15 * 10 = 150 -> remainder 6)",
    "p34p": "15 / 10 = 1 (1*10 = 10 -> remainder 5)",
    "p35p": "1 / 10 = 0 (0*10 = 0 -> remainder 1)",
    "p36p": "We notice something. If we take the remainders from right to left, we get the initial number: 156. To do this we divide by the base (10), and we get a number in decimal. Then let's try dividing by base 2, and maybe we will get a number in binary:",
    "p37p": "156 / 2 = 78 (remainder 0)",
    "p38p": "78  / 2 = 39 (remainder 0)",
    "p39p": "39 / 2 = 19 (remainder 1)",
    "p3p": "Back then, you were studying the numbers. And when you were learning them, the teacher probably made you write something like this:",
    "p40p": "19 / 2 = 9 (remainder 1)",
    "p41p": "9 / 2 = 4 (remainder 1)",
    "p42p": "4 / 2 = 2 (remainder 0)",
    "p43p": "2 / 2 = 1 (remainder 0)",
    "p44p": "1 / 2 = 0 (remainder 1)",
    "p45p": "So, following the above logic, we get the number 10011100, which looks like binary number system (remember, we read binary numbers from right to left). Let's check:",
    "p46p": "10011100 = 1 * 2^7 + 0 * 2^6 + 0 * 2^5 + 1 * 2^4 + 1 * 2^3 + 1 * 2^2 + 0 * 2^1 + 0 * 2^0 = 1 * 128 + 0 * 64 + 0 * 32 + 1 * 16 + 1 * 8 + 1 * 4 + 0 * 1 = 128 + 16 + 8 + 4 = 156",
    "p47p": "So we have done it right!",
    "p48p": "And that's the whole binary number system. It's neither overly complicated nor anything incomprehensible. I hope you caught on. Nevertheless, test yourself:",
    "p49fq": "How much is 238 in binary?",
    "p4p": "56 = 5*10 + 6",
    "p50p": "I'm done with the lesson material, but I haven't explained where the title comes from yet. Actually, it's simple. In the same way that we can have number systems with bases less than 10, we can have ones with bases greater than 10. One widely used with a larger base is the hexadecimal number system - with 16 digits, that is, base 16. \"How so?\" you ask, and the answer is that the digits are these - 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A (10), B (11), C (12), D (13), E (14), F (15). Letters are used for numbers greater than 9 . Hexadecimal is mainly used for colours and representing memory because reading zeros and ones is hard. For example, the number EFEFEF is the background color in most of the application. In decimal that is 15,724,527, and you can see that EFEFEF is easier to spell - that is the practical use.",
    "p51rq": "Pick a color and look up its number in base 16 on the Internet, keeping in mind that hexadecimal color entries are also very often called hexes.",
    "p5p": "Makes sense. Let's try with a three-digit number:",
    "p6p": "156 = 1*100 + 5*10 + 6",
    "p7p": "Let's write this down in its full version - after all, 6 is actually multiplied by 1:",
    "p8p": "156 = 1*100 + 5*10 + 6*1",
    "p9p": "First, let's see what the numbers 100 and 10 have in common. I can already hear you thinking \"They are both divisible by 10\". And you're right. Not only that, but both are powers of 10 -> 10 is 10^1 , and 100 is 10^2 . Let's write it down (\"^\" is a power sign):",
    "text": "Where you woll learn that there aren't only 10 digits",
    "title": "Lesson 1"
  },
  "l10": {
    "p11p": "Result:",
    "p12con": "<<output>>5.68\n<<output>>5.67",
    "p13a1": "double",
    "p13a2": "float",
    "p13tq": "Which can contain more bits of information - double or float?",
    "p14rq": "Look up how to assign a double variable to a float variable in your language. Try using the Internet or write the wrong code in your IDE and see what correction steps are offered to you when you place your mouse on the red line indicating an error.",
    "p1p": "Time for the next two types. They allow you to store non-integer numbers - for example 9.76, 6.78. These are float and double.",
    "p2p": "The name float comes floating point - the point that is in fractional numbers. Float is 4 bytes big. Remember double for being twice as big as float - 8 bytes.",
    "p3p": "When you write a fractional number in code, it is treated as a double. You have to add an \"f\" at the end of it to make it a float.",
    "p4p": "Examples:",
    "p5pc": "float num = 5.67; // Error: you can't give a value of type double to a floay\nfloat num = 5.67f; // No error",
    "p6pc": "double num = 5.67; // You don't get an error",
    "p7p": "Like int, these types can also be printed to the console:",
    "p8ds1": "Java",
    "s10cc": "float num = 5.68f;\ndouble otherNum = 5.67;\nConsole.WriteLine(num);\nConsole.WriteLine(otherNum);",
    "s8ds2": "C#",
    "s9cj": "float num = 5.68f;\ndouble otherNum = 5.67;\nSystem.out.println(num);\nSystem.out.println(otherNum);",
    "text": "Where you will learn what is a real number",
    "title": "Lesson 10"
  },
  "l11": {
    "p100con": "6",
    "p101con": "11",
    "p102pc": "int num = 5;\nint num1 = 6;\nint num2 = num + ++num1; // Here ++num1 will be executed first, i.e. it will become 7\n// Then num + num1 will be executed, or 5+7 with result 12 \nprint(num1);\nprint(num2);",
    "p103p": "Result:",
    "p104con": "7",
    "p105con": "12",
    "p106p": "Will you ever need to use this as information? Maybe. Usually it's better to just use num++ on the next line or the one before so there's no confusion. Why include it here then? Because it's very easy to make a question about it on every exam, hence it is on every exam.",
    "p107pc": "int num = 5;\nint num1 = 6;\nint num2 = 7;\nint num3 = num + num1++ + --num2;",
    "p108a1": "17",
    "p108a2": "16",
    "p108a3": "19",
    "p108a4": "18",
    "p108exp": "Explanation: first --num2 is done, where num2 becomes 6. Then the addition num + num1 + num2 happens, which equals 5 + 6 + 6, so 17. Finally, num1++ is executed, where num1 becomes 7.",
    "p108tq": "After the above operation, num3 is equal to:",
    "p10pc": "int one = 5;\nint two = 6;\nint three = one + two;\nprint(three);",
    "p110h": "Bitwise operators",
    "p111p": "Bitwise (\"bitwise\") operators are one of the biggest possible confusions. It's very possible you'll encounter them somewhere, but pray it doesn't happen (at least on numbers, there are other uses in some languages that are far more practical).",
    "p112p": "The bitwise operators are \"<<\", \">>\", \"|\", \"&\", \"^\", \"~\". They manipulate numbers as bits.",
    "p113p": "<< and >> are the so-called shifts. They move a given amount of bits to one side. For example:",
    "p114pre": "10011100 << 1 equals 00111000",
    "p115pre": "10011100 >> 1 equals 01001110",
    "p116p": "This can have huge effects - in the first example 10011100 is 156, and after \"<< 1\", 00111000 equals 56. The effects are almost unpredictable, and the benefits small.",
    "p117h": "|",
    "p118p": "A \"logical OR\" is an operation between two binary numbers that works like this:",
    "p119pre": "\n0101 -> first number\n0111 -> second number\n0111 -> result",
    "p11p": "Result:",
    "p120p": "That means, if there is a 1 and a 0 in a position, a 1 is written. If there are two times 2, 1 is recorded. If there are two 0's a 0 is recorded.",
    "p121h": "&",
    "p122p": "The \"logical AND\" is an operation between two binary numbers that works like this:",
    "p123pre": "\n0101 -> first number\n0111 -> second number\n0101 -> result",
    "p124p": "Similar to the logical or, except that 0 and 1 is 0. That means, the only situation where we write 1 is when we have two 1's.",
    "p125h": "^",
    "p126p": "A \"logical XOR\" is an operation between two binary numbers that works like this:",
    "p127pre": "\n0101 -> first number\n0111 -> second number\n0010 -> result",
    "p128p": "Here, the only situation in which we write 1 is when the two numbers are different - 0 and 1.",
    "p129h": "~",
    "p12con": "11",
    "p130p": "This is the \"compliment.\" In this case the result of ~0101 is 1010 - so it just flips the bits - at 1 there is 0 and at 0 there is 1.",
    "p13p": "If we perform any arithmetic operation on two numbers, float and double respectively, the result is of type double (floatSum and doubleSum are created/declared above):",
    "p14pc": "float floatDoubleSum = floatSum + doubleSum; // That will give an error\ndouble floatDoubleSum = floatSum + doubleSum; // Everything is fine here",
    "p15p": "The same logic is followed for operations between int and float or int and double - the final result is always float or double:",
    "p16pc": "int intFloatSum = intSum + floatSum; // That will give an error\nfloat floatDoubleSum = intSum + floatSum; // Everything is fine here",
    "p17p": "We can put as many arithmetic actions as we want one after another:",
    "p18pc": "int sum = 5 + 6 + 7 + 8 + 9 + 10 + 11;\nprint(sum);",
    "p19p": "Result:",
    "p1p": "In programming languages, there are so-called expressions. Expressions always end in a variable type, whether they are arithmetic operations or logical comparisons. Wherever a variable of a given type can be placed, an expression that ends in it can also be placed. Today we'll look at one of the types of expressions - arithmetic operations.",
    "p20con": "56",
    "p21a1": "int",
    "p21a2": "short",
    "p21a3": "float",
    "p21a4": "double",
    "p21p": "Arithmetic operations can be performed in many different places. For example:",
    "p21tq": "The result of \"5 + 6.5f + 5.12\" would be of the type:",
    "p23pc": "print(5+6+7);",
    "p24p": "Result:",
    "p25con": "18",
    "p26h": "Subtraction",
    "p27pc": "int difference = 6 - 5;\nprint(difference);",
    "p28p": "Result:",
    "p29con": "1",
    "p2h": "Addition",
    "p30p": "The difference in subtraction can also be a negative number:",
    "p31pc": "int negativeDifference = 5 - 6;\nprint(negativeDifference);",
    "p32p": "Result:",
    "p33con": "-1",
    "p34p": "The same rules for actions between types apply.",
    "p35h": "Multiplication",
    "p36p": "Multiplication in programming is done with an asterisk (\"*\"):",
    "p37pc": "int product = 5 * 6;\nprint(product);",
    "p38p": "Result:",
    "p39con": "30",
    "p3p": "We can add two integers (int). We get another int.",
    "p40p": "It should be noted that programming languages usually follow the order of operations (parentheses -> multiplication and division -> addition and subtraction):",
    "p41pc": "int expression = (10 - 5*2)*6;\nprint(expression);",
    "p42p": "Result:",
    "p43con": "0",
    "p44p": "Here the expression in the parentheses is calculated first: 10 - 5*2. In it, first the multiplication (5*2) is executed and then the subtraction (10 - 10) is performed. The expression becomes 0 * 6, which is 0.",
    "p45pc": "int expressionWithParantheses = ((10 - 5)*2)*6;\nprint(expressionWithParantheses);",
    "p46p": "Result:",
    "p47con": "60",
    "p48p": "Here the expression in parentheses is first calculated: (10-5)*2, which is 5*2 = 10. Then 10*6 equals 60.",
    "p49p": "The same rules for actions between types apply.",
    "p4pc": "int intSum = 5 + 4;\nprint(intSum);",
    "p50a1": "10",
    "p50a2": "0",
    "p50a3": "55",
    "p50a4": "-44",
    "p50h": "Division",
    "p50tq": "The result of \"10*(6-5)\" is:",
    "p52p": "The division in programming is type specific:",
    "p53pc": "int result = 6 / 2;\nprint(result);",
    "p54p": "Result:",
    "p55con": "3",
    "p56p": "This is the expected: 6/2 is 3",
    "p57p": "The problem is when we have a division where there is a remainder. For example 8/3. Since the result of this is roughly 2.66, and we know there can only be integers in int, the result is stored as 2:",
    "p58pc": "int resultWithRemainder = 8 / 3;\nprint(resultWithRemainder);",
    "p59p": "Result:",
    "p5p": "Result:",
    "p60con": "2",
    "p61pc": "int otherResult = result / otherResult; // 3 / 2\nprint(otherResult);",
    "p62p": "Result:",
    "p63con": "1",
    "p64p": "However, if we have float or double, we get the expected result:",
    "p65pc": "float resultFloat =  8f / 3f;\nprint(resultFloat);",
    "p66p": "Result:",
    "p67con": "2.6666667",
    "p68p": "Wait... What?",
    "p69p": "The result should be 2.66. But it isn't. It turns out that computers and the binary system are not very good at accurately representing fractional numbers. That's why there are sometimes errors like this. Don't worry - they happen often and there's no specific way to fix them.",
    "p6con": "9",
    "p70p": "The same rules for actions between types apply.",
    "p71a1": "3",
    "p71a2": "4",
    "p71a3": "1",
    "p71a4": "2",
    "p71h": "Division with remainder",
    "p71tq": "The result of 28 / 9, if both numbers are of type int, is:",
    "p73p": "Division with a remainder, or modulo, is an operation that is not very common in normal mathematics but is useful in programming. It is denoted by \"%\" and returns only the remainder of the division:",
    "p74pc": "int result = 9 / 2;\nprint(result);",
    "p75p": "Result:",
    "p76con": "1",
    "p77p": "We can see that the remainder of this division is 1: 8 is divisible by 2, 9 is not. Therefore 9/2 would be 4, and 9%2 is 1. This works the same way for float and double.",
    "p78p": "The same rules for actions between types apply.",
    "p79a1": "3",
    "p79a2": "4",
    "p79a3": "`1",
    "p79a4": "2",
    "p79h": "Manipulations with 1",
    "p79tq": "The result of 28 % 9, if both numbers are of type int, is:",
    "p7p": "We can add together two numbers of type float or double:",
    "p81p": "Very often in programming you need to add to or subtract 1 from a number. But sometimes this is a bit long. For example:",
    "p82pc": "int num = 2;\nnum = num + 1;\nprint(num);",
    "p83p": "Result:",
    "p84con": "3",
    "p85p": "or",
    "p86pc": "int num = 3;\nnum = num - 1;\nprint(num);",
    "p87p": "Result:",
    "p88con": "2",
    "p89p": "And programmers are lazy people. That's why the operators for manipulation with \"++\" and \"--\" were invented. Let's test them:",
    "p8pc": "float floatSum = 5.67f + 2.33f;\ndouble doubleSum = 5.67 + 2.33;",
    "p90pc": "int num = 2;\nnum++;\nprint(num);",
    "p91p": "Result:",
    "p92con": "3",
    "p93p": "or",
    "p94pc": "int num = 3;\nnum--;\nprint(num);",
    "p95p": "Result:",
    "p96con": "2",
    "p97p": "This is easy. The problem comes from where they are placed - you can place them before and after the variable. The difference is that before the variable the 1 manipulation operator is done first, then the other actions. If it's after, the other actions are done first, then the 1 manipulation operator. Let me show you directly:",
    "p98pc": "int num = 5;\nint num1 = 6;\nint num2 = num++ + num1; // Here num + num1 will be executed first, i.e. 5+6, which will be 11\n// Accordingly, num2 will become 11. Then num++ will be executed, where num becomes 6\nprint(num);\nprint(num2);",
    "p99p": "Result:",
    "p9p": "We can also add two variables of the same type:",
    "text": "Where you will learn how to add and subtract numbers... once again",
    "title": "Lesson 11"
  },
  "l12": {
    "p10p": "We can also assign integers to char and get their corresponding symbol. According to most encodings, 'a' is the number 97. That means, we can do this:",
    "p11pc": "char aChar = 97;\nprint(aChar);",
    "p12p": "Result:",
    "p13con": "a",
    "p14p": "Moreover, we can also use the operators for manipulation by 1:",
    "p15pc": "char aChar = 97;\naChar++;\nprint(aChar);",
    "p16p": "Result:",
    "p17con": "b",
    "p18a1": "operators for manipulation by 1",
    "p18a2": "addition",
    "p18a3": "subtraction",
    "p18a4": "all of the mentioned above",
    "p18tq": "On char, we can use:",
    "p19p": "It was char. Open your IDE, if you haven't already, and play around with the new stuff. The possibilities for testing are great. Good luck!",
    "p1p": "The time is coming soon when you will learn to save text. Before that, however, you need to be able to save single characters. In this tutorial, we will deal with the char type.",
    "p2p": "char comes from character and retains a single character. That's right:",
    "p3pc": "char a = 'a';",
    "p4w": "The symbol is written in single quotes - ' '. The text is written in normal ones, and char can store only one character.",
    "p5p": "That in itself is not very interesting - char stores one symbol. But, remember what we said in the coding lesson - each character is stored as a number by the computer. This leads to some interesting things - 'a' is less than 'b'. And it allows us to perform arithmetic operations on characters:",
    "p6pc": "char a = 'a';\nchar b = 'b';\nint c = 'a' - 'b';\nprint(c);",
    "p7p": "Result:",
    "p8con": "-1",
    "p9p": "Here we know that according to the ordering of the symbols, b is one greater than a. That is, if we subtract b from a, we get -1.",
    "text": "Where you will understand why you learned character encoding",
    "title": "Lesson 12"
  },
  "l13": {
    "p10exp": "Character 0 is 'n'. Character 1 is 'a'. Character 2 is 'm'. Character 3 is 'e'. Character 4 is 's'. Character 5 is a space. Character 6 is 'o'.",
    "p11p": "Let's see some examples:",
    "p12ds1": "Java",
    "p1p": "The time has come. In this lesson you will learn how to save text using the string type.",
    "p2p": "String is a sequence of characters. In early programming languages, this type did not really exist as it does today. It was represented by a sequence of char in memory. Hence the name - a string of characters. Most modern languages store all strings with тхе Unicode encoding.",
    "p3p": "Strings can perform one main operation, and that is \"concatenation\" - concatenating two strings. It is accepted that when a string is created, its characters can no longer be modified - a new modified string must be created. Java and C# follow this philosophy. On the other hand, individual characters can be read. Each character in a string has an index. The first character from right to left has index 0. The second has index 1, and so on. For example:",
    "p4p": "Cups",
    "p5p": "C has an index of 0",
    "p6p": "U has an index of 1",
    "p7p": "P has an index of 2",
    "p8p": "S has an index 3",
    "p90p": "Независимо кой език използваш, най-вероятно ще ти се наложи да запишеш кавички в низ:",
    "p91pre": "\"the word \"health\" is a noun\"",
    "p92p": "The following string would give an error because it is looking at the first quotes and then at the directly following - a programming language would perceive this as the string \"word \", \"health\" outside of any string and \" is a noun\" as another string.",
    "p93p": "To solve the following problem, an escape character is used - \"\". Quotes that are part of a string are prefixed with \"\", which signals the language that they should not be taken as the beginning or end of a new string:",
    "p94pre": "\"думата \"здраве\" е съществително\"",
    "p9a1": "o",
    "p9a2": "space",
    "p9a3": "a",
    "p9a4": "k",
    "p9tq": "In the string \"names of kings\", at index 6 is the symbol:",
    "s13p": "A String variable is created using the following code:",
    "s14cj": "String hello = \"hello\";",
    "s15p": "Notice that String is capitalized, unlike the other types you've studied so far. Then there is the variable name, as usual. The string itself is always written between double quotes - the opposite of char's single quotes. This is how the language distinguishes one type from the other.",
    "s16p": "A String variable can be printed to the console:",
    "s17cj": "String hello = \"hello\";\nSystem.out.println(zdravei);",
    "s18p": "Result:",
    "s19con": "hello",
    "s20p": "You can add to strings - concatenation. This is done with the plus sign. You can add strings, integers, non-integers:",
    "s21cj": "String hello = \"hello\";\nString helloTony = hello + \"Tony\" + 5;\nSystem.out.println(helloTony);",
    "s22p": "Result:",
    "s23con": "helloTony5",
    "s24p": "Concatenation doesn't add spaces on its own - we have to do that:",
    "s25cj": "String hello = \"hello\";\nString helloTony = hello + \" Tony\"; // Notice the space before the word Tony in the string\nSystem.out.println(helloTony);",
    "s26p": "Result:",
    "s27con": "hello Tony",
    "s28p": "We can also concatenate two strings on the spot (concatenation is a kind of expression):",
    "s29cj": "System.out.println(\"Hello” + \" George”);",
    "s30p": "Result:",
    "s31con": "Hello George",
    "s32p": "We can also use a shorter operator that we have not used before. Instead of writing:",
    "s33cj": "String hello = \"hello”;\nhello = hello + \" Tony”; // hello will have a new value - \"Hello Tony\"",
    "s34p": "We can write:",
    "s35cj": "String hello = \"hello”;\nhello += \" Tony”; // Notice that we write \"+=\". This means to add the value we are giving and it will still result in \"hello Tony\". It also works with the other operators for arithmetic operations, such as -, *, /.",
    "s36p": "We can get a character from a String as follows:",
    "s37cj": "String hello = \"hello”;\nchar firstCharOfHello = hello.charAt(0);\nSystem.out.println(firstCharOfHello)",
    "s38p": "Result:",
    "s39con": "h",
    "s40p": "Here we create a variable of type char named firstCharOfHello. It is is equal to zdravei (the name of our variable), then dot and charAt(). The index is written in the parentheses of charAt. Here the index is 0, which is the \"h\" of \"hello\" - the first character. The .charAt() is called a method, and in this case the zero is an argument. System.out.println() is written similarly - here .println() is also a method, and between the parentheses is the argument. The other types we've studied so far don't have methods. In a later lesson, we'll look at all the string methods and learn how to create your own methods.",
    "s41p": "Now we can also understand how the System.out.println() works:",
    "s42cj": "String helloTony = \"Hello Ivan\";\nString answer = \"Hello to you too\";\nSystem.out.println(helloTony);\nSystem.out.println(answer);",
    "s43p": "Result:",
    "s44con": "Hello Tony",
    "s45con": "Hello to you too",
    "s46p": "This above is equivalent to concatenation with the symbol for a new line - \"\n\":",
    "s47cj": "String helloTony = \"Hello Tony”;\nString answer = \"Hello to you too”;\nSystem.out.print(helloTony + \"\n”); //  Notice that here we only write .print(), so we expect \"Hello TonyHello to you too\" on the same line. But because of the addition of \"\n\", we get a new line.\nSystem.out.println(answer);",
    "s48p": "Result:",
    "s49con": "Hello Tony",
    "s50con": "Hello to you too",
    "s51ds2": "C#",
    "s52p": "A string variable is created using the following code:",
    "s53cc": "string hello = \"hello\";",
    "s54p": "Notice that string is lowercase. Then there is the variable name, as usual. The string itself is always written between double quotes - the opposite of char's single quotes. This is how the language distinguishes one type from the other.",
    "s55p": "A string variable can be printed to the console:",
    "s56cc": "String hello = \"hello\";\nConsole.WriteLine(zdravei);",
    "s57p": "Result:",
    "s58con": "hello",
    "s59p": "You can add to strings - concatenation. This is done with the plus sign. You can add strings, integers, non-integers:",
    "s60cc": "string hello = \"hello\";\nstring helloTony = hello + \"Tony\" + 5;\nConsole.WriteLine(helloTony);",
    "s61p": "Result:",
    "s62con": "helloTony5",
    "s63p": "Concatenation doesn't add spaces on its own - we have to do that:",
    "s64cc": "string hello = \"hello\";\nstring helloTony = hello + \" Tony\"; // Notice the space before the word Tony in the string\nConsole.WriteLine(helloTony);",
    "s65p": "Result:",
    "s66con": "hello Tony",
    "s67p": "We can also concatenate two strings on the spot (concatenation is a kind of expression):",
    "s68cc": "Console.WriteLine(\"Hello” + \" George”);",
    "s69p": "Result:",
    "s70con": "Hello George",
    "s71p": "We can also use a shorter operator that we have not used before. Instead of writing:",
    "s72cc": "string hello = \"hello”;\nhello = hello + \" Tony”; // hello will have a new value - \"Hello Tony\"",
    "s73p": "We can write:",
    "s74cc": "string hello = \"hello”;\nhello += \" Tony”; // Notice that we write \"+=\". This means to add the value we are giving and it will still result in \"hello Tony\". It also works with the other operators for arithmetic operations, such as -, *, /.",
    "s75p": "We can get a character from a string as follows:",
    "s76cc": "String hello = \"hello”;\nchar firstCharOfHello = hello[0]\nConsole.WriteLine(firstCharOfHello);",
    "s77p": "Result:",
    "s78con": "h",
    "s79p": "Here we create a variable of type char named firstCharOfHello. This is equal to hello (the name of our variable) then [] - the index access operator. The index is written into it. It will return in our lessons at a later point.",
    "s80p": "Now we can also understand how the Console.WriteLine() works:",
    "s81cc": "string helloTony = \"Hello Ivan\";\nstring answer = \"Hello to you too\";\nConsole.WriteLine(helloTony);\nConsole.WriteLine(answer);",
    "s82p": "Result:",
    "s83con": "Hello Tony",
    "s84con": "Hello to you too",
    "s85p": "This above is equivalent to concatenation with the symbol for a new line - \"\n\":",
    "s86cc": "string helloTony = \"Hello Tony”;\nstring answer = \"Hello to you too”;\nConsole.Write(helloTony + \"\n”); //  Notice that here we only write Write(), so we expect \"Hello TonyHello to you too\" on the same line. But because of the addition of \"\n\", we get a new line.\nConsole.WriteLine(answer);",
    "s87p": "Result:",
    "s88con": "Hello Tony",
    "s89con": "Hello to you too",
    "text": "Where you will learn how text is stored",
    "title": "Lesson 13"
  },
  "l14": {
    "p1p": "In today's lesson we will discuss libraries. No, not the ones where you go to get books. We'll be discussing libraries in programming.",
    "p29rq": "Explore the Math Library in your language - how is the number \"pi\" used? How do you raise to a power? How do you find the square root of a number? Also check out Maven and Gradle (Java) or NuGet (C#).",
    "p2p": "Many, many years ago, every time something needed to be created, someone sat down and wrote it. You want a random number? Write the code. You want to show something on the screen? Write the code. It's tiring. This is why libraries were born. A library in programming is a collection of code to accomplish some, usually common, goal. A library can be written by one person and distributed to hundreds or millions of programmers. Anyone can use it without even knowing themselves how the code inside works. Nowadays there are libraries for all the ugly and labor-intensive things programmers don't want to do themselves - authentication, encryption, hashing, GUIs, reading files. You get the idea. Standard libraries have come into being at some point - almost every language has one. Standard libraries include a lot of things that are nice to have, but not a good idea to include in the language - random number generators, math constants, file readers. For example, in Java \"System.out.println()\" is actually part of the standard library. In C#, it's \"Console.WriteLine()\". The libraries are imported into the code.",
    "p3a1": "don't need to be imported",
    "p3a2": "are a collection of code",
    "p3a3": "usually have a goal",
    "p3a4": "consist of books",
    "p3tq": "Libraries in programming:",
    "p4p": "Let's see some examples:",
    "p5ds1": "Java",
    "s10p": "We write the Random type. Then the name of the variable - rand. Then we create a variable with new Random() - \"new random\". Now we have the variable rand. How do we create a random number? By using rand.nextInt():",
    "s11cj": "int randomInt = rand.nextInt();",
    "s12p": "However, this will create a random int across the range of int values - could be 2, could be 1 656 789. If we want to limit rand.nextInt(), we write a number in parentheses. It is the maximum that can be created this time.",
    "s13p": "For example:",
    "s14cj": "int randomInt = rand.nextInt(23); // here the number is always smaller then 23\nint randomInt2 = rand.nextInt(34); // here the number is always smaller than 34",
    "s15p": "There are similar methods for the other types - have a look at .nextDouble(), .nextFloat() and .nextLong().",
    "s16ds2": "C#",
    "s17p": "In C#, imports of library parts are written at the top. The word \"using\" is used. You may have already noticed that you have one import at the top - \"using System\". This allows you to use the standard C# library - things like Console.WriteLine(). Then you type the path to the part of the library you want to import:",
    "s18cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\t\n\t}\n}",
    "s19p": "You can see that here we write \"using System;\" Once we've imported the standard library, we can use Random. Random is actually a type, similar to string. We can create a variable from it. That is done like this:",
    "s20cc": "Random rand = new Random();",
    "s21p": "Here we write the Random type. Then the name of the variable - rand. Then we create a variable with new Random() - \"new random\". Now we have the variable rand. How do we create a random number? Using rand.Next():",
    "s22cc": "int randomInt = rand.Next();",
    "s23p": "However, this will create a random int across the range of int values - could be 2, could be 1 656 789. If we want to limit rand.Next(), we write a number in parentheses. It is the maximum that can be created that time.",
    "s24p": "For example:",
    "s25cc": "int randomInt = rand.Next(23); // here the number is always smaller then 23\nint randomInt2 = rand.Next(34); // here the number is always smaller than 34",
    "s26p": "We can also limit the lower value. Then we write two different numbers in parentheses separated by commas. The first is the minimum value and the second is the maximum value:",
    "s27cc": "int randomInt = rand.Next(23, 46); // the number here is always between 23 and 46",
    "s28p": "There are similar methods for other types - have a look at .NextDouble() and .NextBytes()",
    "s6p": "In Java, imports of library parts are written above - after package and before class. The word import is used. Then the package path to the part of the library we want to import is written.",
    "s7cj": "package hello;\n\nimport java.util.Random;\n\npublic class Hello {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n\n}",
    "s8p": "You see here we write \"import java.util.Random\" Do you remember what a package is? Created one earlier in these tutorials. Here we go through the java package first, then the util package. Finally is the Random class - similar to the one you created earlier so you can write code in that as well. Once we've imported it, we can use Random. Random is actually a type, similar to String. We can create a variable from it. This is done like this:",
    "s9cj": "Random rand = new Random();",
    "text": "where you will learn the common thing between libraries and computers",
    "title": "Lesson 14"
  },
  "l15": {
    "p10p": "Let's see how it works in Java and C#:",
    "p11ds1": "Java",
    "p1p": "So far we have only output to the console. Today you will learn to input from the console to your programs.",
    "p2p": "In short, inputting would work like this in our pseudocode:",
    "p3pc": "string in = input();\nprint(in);",
    "p4p": "Input:",
    "p52p": "Task:",
    "p53rq": "Build a program that asks the user how old he is from the console and takes his input as an integer. Then ask for the user's name as a string. Finally, print the information in the \"Name, Age\" form.",
    "p5con": "Hello!",
    "p6p": "Result:",
    "p7con": "Hello!",
    "p8p": "Here the program will get to the line string in = input();, where it will start waiting for input from the console. You will be able to type whatever you want into the console and then press enter (new line), which will enter the character for the new line \n and what you wrote will be read. When this happens, the value you typed in the console will be carried over to the program and the \"in\" variable will become equal to it. The program will continue running, printing \"in\" to the console.",
    "p9a1": "it turns off",
    "p9a2": "stops answering",
    "p9a3": "pauses while waiting for input",
    "p9a4": "continues running",
    "p9tq": "What happens to the program when it gets to input() in the above example?",
    "s12p": "In Java, reading files is done with the Scanner type, part of the standard library. Actually, Scanner reads all files - in the past (and now in many cases) the console was just a file you write to, so it stayed that way.",
    "s13p": "Since Scanner is part of the standard library, and not the language itself, we need to import it into the file first. This is done with:",
    "s14cj": "import java.util.Scanner;",
    "s15p": "Don't forget where imports are placed - between package and class.",
    "s16p": "I mentioned that Scanner is a type. Similar to Random. Do you remember how you created a new Random? In the same way, create a variable with type Scanner and name \"sc\" or \"input\".",
    "s17p": "Your code should look like this:",
    "s18cj": "package tutorial;\n\nimport java.util.Scanner;\n\npublic class Input {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner();\n\t}\n}",
    "s19p": "However, if you run this code, you will get an error. The problem is that Scanner needs to get an argument. It makes sense - it needs to know which file to read. It expects the argument between the parentheses. Here we would enter a string with the path to a file - absolute or relative. For example:",
    "s20cj": "package tutorial;\n\nimport java.util.Scanner;\n\npublic class Input {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(\"C:veryimportantfile.txt\");\n\t}\n}",
    "s21p": "That would give an error - remember why?",
    "s22p": "Yes, because of . That is, it would be right:",
    "s23cj": "package tutorial;\n\nimport java.util.Scanner;\n\npublic class Input {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(\"C:/veryimportantfile.txt\");\n\t}\n}",
    "s24p": "But we need the console. And we don't know the path to it. Luckily for us, someone has thought of something for this case. As an argument, we won't give a path, we'll give \"System.in\". Notice that we print to the console with System.out.println(), and enter from it with System.in - this is the console. The final code looks like this:",
    "s25cj": "package tutorial;\n\nimport java.util.Scanner;\n\npublic class Input {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t}\n}",
    "s26p": "Accordingly, we now have the \"input\" variable.  It is also called an object and has the type Scanner. Let's enter our first string using .nextLine():",
    "s27cj": "package tutorial;\n\nimport java.util.Scanner;\n\npublic class Input {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tString greeting = input.nextLine();\n\t\tSystem.out.println(greeting);\n\t}\n}",
    "s28p": "Input:",
    "s29con": "Hello",
    "s30p": "Result:",
    "s31con": "Hello",
    "s32p": "Here we create a variable greeting of type string, which is equal to input.nextLine(). The program waits for you to type something into the console and press Enter, then continues and prints the greeting you typed to the console.",
    "s33p": "Scanner also has other methods. For example .nextInt(), .nextLong(), .nextByte() and so on. Check them out yourself. I just need to warn you about something.",
    "s34e": "There is a bug in the Java Scanner. If you first ask for an integer (int) and then a String, you get an empty String.",
    "s35cj": "package tutorial;\n\nimport java.util.Scanner;\n\npublic class Input {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint inputInt = input.nextInt();\n\t\tString scannerBug = input.nextLine();\n\t}\n}",
    "s36p": "Input:",
    "s37con": "5",
    "s38con": "<<output>> //The program has already stopped here",
    "s39p": "What happens here is that input.nextInt() does not take the \"\n\" when you press Enter. That is, input.nextLine() takes the remaining \"\n\" and because it's waiting for that character, it immediately stops reading and returns an empty string to you. This is fixed as follows:",
    "s40cj": "package tutorial;\n\nimport java.util.Scanner;\n\npublic class Input {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint inputInt = input.nextInt();\n\t\tinput.nextLine();\n\t\tString fixedScannerBug = input.nextLine();\n\t}\n}",
    "s41p": "Input:",
    "s42con": "5",
    "s43con": "Hello",
    "s44p": "The whole number is taken here. Then input.nextLine(); on the next line takes the lone \"\n\" and since the empty string is not given to any variable, it disappears into non-existence. Then the next input.nextLine() can safely take whatever you write on the next line.",
    "s45ds2": "C#",
    "s46p": "In C#, reading from the console is similar to printing to the console. Only, instead of Console.WriteLine(), we use Console.ReadLine():",
    "s47cc": "using System; // Don't forget that we need System to use Console\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tstring pozdrav = Console.ReadLine();\n\t\tConsole.WriteLine(pozdrav);\n\t}\n}",
    "s48p": "Here we create a variable greeting of type string which is equal to Console.ReadLine(). The program waits for you to type something into the console and press Enter, then continues and prints the greeting you typed to the console.",
    "s49p": "If you want to get something other than a string, you have to use a different method - Convert. It works like this:",
    "s50cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tint num = Convert.ToInt32(Console.ReadLine());\n\t\tConsole.WriteLine(num);\n\t}\n}",
    "s51p": "Convert.ToInt32() receives Console.ReadLine() as an argument, therefore converts the result to int32 or in other words int with 32 bits - 4 bytes - or our normal int. There's also Convert.ToInt64(), which is long, and Convert.ToInt16(), which is 16 bits - 2 bytes, or short. There's also .ToDouble() and .ToChar().",
    "text": "Where you will learn how to use the console... from the other side",
    "title": "Lesson 15"
  },
  "l16": {
    "p10p": "We are not interested in these languages. We are interested in Java and C#.",
    "p11p": "Like anything else, \"true\" and \"false\" have a special variable type for themselves. It's called a boolean. The type is named after an English mathematician - George Boolean.",
    "p12p": "Boolean types fit in one byte - they don't need more. After all, they have exactly two possible values. You'll probably ask why it's not 1 bit, and the answer is that most processors can't use anything less than 1 byte.",
    "p13p": "Let's see how they are declared in different languages:",
    "p14ds1": "Java",
    "p19p": "This is the creation of a boolean variable. But right now, it's not very useful to us. Why do we need to know if something is true or false if we are the ones deciding it anyway!",
    "p1p": "There comes a point in programming where you have to compare something. Whether it's two numbers or two characters. In this lesson, you'll learn to do just that.",
    "p20p": "So now I will teach you to compare. I will use our pseudocode.",
    "p21h": ">, <",
    "p22p": "The first comparison operators are greater than and less than. You know them, I hope. That's how they work:",
    "p23pc": "bool comparison = 5 < 7;\nprint(comparison);",
    "p24p": "Result:",
    "p25con": "true",
    "p26p": "Id. We create the variable and assign it to a statement. The computer decides whether the statement is correct and gives a value of true or false. We can also compare on the spot:",
    "p27pc": "print(5 > 7);",
    "p28p": "Result:",
    "p29con": "false",
    "p2p": "First, see the following statement:",
    "p30p": "5 is obviously not greater than 7.",
    "p31p": "We can also compare variables:",
    "p32pc": "int num = 1;\nint num2 = 2;\nprint(num < num2);",
    "p33p": "Result:",
    "p34con": "true",
    "p35p": "... and sometimes even if they are not of the same type:",
    "p36pc": "print(5f < 6.7);",
    "p37p": "Result:",
    "p38con": "true",
    "p39h": "==, !=",
    "p3p": "\"I didn't lie.\"",
    "p40p": "People very often compare two numbers to see if they are equal. And usually, this is done with \"=\". But there's a slight problem - we already use \"=\" for assignment. How is the compiler supposed to know if we're comparing the num variable to 5 or trying to assign 5 to num?",
    "p41pc": "int num = 6;\nbool b = num = 5; // You can see how that could be confusing and lead to errors",
    "p42p": "Instead, we use \"==\". That way, both the programmer and the compiler know what we mean:",
    "p43pc": "int num = 6;\nbool b = num == 5;\nprint(b);",
    "p44p": "Result:",
    "p45con": "false",
    "p46p": "6 doesn't equal 5",
    "p47p": "There is another problem. Sometimes we want to check if two numbers are not equal, not if they are equal. In mathematics, this is represented by the symbol \"equal with a line through it\" - \"crossing out the equality\", sort of. But here we can neither use equal, nor can we cross it out. So someone made up \"!=\" and everyone accepted that it seemed close enough to the real thing. And we use it to this day.",
    "p48pc": "int num = 6;\nbool b = num != 5;\nprint(b);",
    "p49p": "Result:",
    "p4p": "What could this statement be? What could any statement be?",
    "p50con": "true",
    "p51p": "num does not equal 5, so the statement is true. b is true.",
    "p52p": "At some point, everyone accepted that \"!\" would reverse the meaning of a boolean.",
    "p53p": "So we can do things like that:",
    "p54pc": "bool b = !(5<6); // 5 is less than 6, so the expression in the parentheses is true. \"!\" reverses the value, so \"b\" becomes false.\nprint(b);",
    "p55p": "Result:",
    "p56con": "false",
    "p57h": ">=, <=",
    "p58p": "Another thing I need to emphasize is that 6 is not less than 6. That means, 6 < 6 is not true. 6 > 6 is also not true. When we want both conditions, we use >= and <=. This is greater than or equal to and less than or equal to respectively. 6 >= 6 is true. 6 >= 3 is also true. I leave it to you to test this. And remember, \"equals\" is always to the right of the initial operator.",
    "p59w": "In Java, String variables should not be compared with \"==\". In this case, it checks if the addresses of the two variables in the heap are the same (references). This is not guaranteed to be true in all versions of Java, even if the strings are identical in content. Instead, use .equals(secondString). This also applies to other objects of special types like Random and Scanner (although you'll probably never need to compare those):",
    "p5p": "If you answered \"right and wrong\", you're right. Those are the two states of any statement.",
    "p60cj": "String test = \"hello”;\nString test1 = \"hello”;\nSystem.out.println(test == test1);",
    "p61p": "Result:",
    "p62con": "false or true",
    "p63p": "Although the strings here are obviously equal, there is a high chance that on many versions of Java the result is false. Instead, use this:",
    "p64cj": "String test = \"hello”;\nString test1 = \"hello”;\nSystem.out.println(test.equals(test1));",
    "p65p": "Result:",
    "p66con": "true",
    "p67p": "Here we use .equals() and we know that the result is always real.",
    "p68p": "You may have noticed that I didn't ask a single question in this lesson. That's because now you'll get your first real exercise!",
    "p69rq": "Write a program in which you enter two numbers from the console. If the first is greater, output true to the console, otherwise output false.",
    "p6p": "When we write code, we do the same. We present a statement, and the computer tells us whether it is true or false. We write the statement 5 < 6 and the computer tells us \"This is true\". We write 7 > 8 and the computer tells us \"This is false\". This is the most important thing to understand in this lesson.",
    "p7p": "In the beginning, true and false was represented by the numbers 1 and 0 - 1 meaning true and 0 meaning false. Makes sense. At some point, someone decided to come up with something a little more readable, and we ended up with today's \"true\" and \"false,\" found in almost every language I've ever encountered and that you're likely to encounter. It's funny, actually, that in some languages the line between 1 and \"true\" and 0 and \"false\" is so small that something of this sort works:",
    "p8pc": "int num = (false + true + true)  * true;",
    "p9p": "That ends with num being equal to 2",
    "s15cj": "package tutorial;\n\npublic class Booleans {\n\t\n\tpublic static void main(String[] args) {\n\t\tboolean b = true;\n\t\tboolean b1 = false;\n\t}\n}",
    "s16p": "Notice that the name in Java is written completely - boolean. In our pseudocode I will use bool, the abbreviation also used in C#, because it is shorter. However, it does not exist in Java.",
    "s17ds2": "C#",
    "s18cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tbool b = true;\n\t\tbool b1 = false;\n\t}\n}",
    "text": "Where you will learn how to compare",
    "title": "Lesson 16"
  },
  "l17": {
    "p10con": "true",
    "p11p": "This is true because both 5<7 and 6<7 is true. However, if we do:",
    "p12pc": "print(5 < 7 && 7 < 7);",
    "p13p": "Result:",
    "p14con": "false",
    "p15p": "The result is false because 5 is less than 7, but 7 is not less than 7. That is, we have 1 wrong, so the whole result becomes wrong.",
    "p16p": "\"Logical or\" is this operator - \"||\". It is placed between two statements and outputs true if there is at least one true statement. Otherwise the result is false. These are the cases:",
    "p17pre": "true || true = true",
    "p18pre": "true || false = true",
    "p19pre": "false || true = true",
    "p1p": "The first thing we'll look at today is logical operators. Specifically, the \"logical and\" and the \"logical or\". You may recall that we mentioned these names once - in our lesson on arithmetic operations. But then it was about numbers and here it's about boolean variables.",
    "p20pre": "false || false = false",
    "p21p": "In code it is used where any other comparison can be placed:",
    "p22pc": "bool b = 5 < 7 || 7 < 7;\nprint(b);",
    "p23p": "Result:",
    "p24con": "true",
    "p25p": "This is true because 5<7 is also true, i.e. it doesn't matter to the \"logical or\" that 7 is not less than 7. There is 1 true, so the whole result is true. However, if we do:",
    "p26pc": "print(7 < 7 && 8 < 7);",
    "p27p": "Result;",
    "p28con": "false",
    "p29p": "The result is false because 7 is not less than 7 and 8 is not less than 7. That means all statements are wrong, so the whole result becomes wrong.",
    "p2p": "The \"logical and\" is the \"&&\" operator. It is placed between two statements and its result is true if both statements are true. Otherwise the result is false. These are the cases arranged in a truth table, which represents all possible variants in a logical expression and their results:",
    "p30a1": "true",
    "p30a2": "false",
    "p30exp": "6 is less than 8, so true. However, 9 is not less than 0. However, there is a logical or between the two statements, i.e., the entire result in parentheses is true. Then we have the statement that 6 + 1 does not equal 7, which is false. The operator is a logical and. On one side we have true from the parentheses, on the other we have false, so the result is false.",
    "p30tq": "Is the statement \"(6 < 8 || 9 < 0) && 6 + 1 != 7\" true or false?",
    "p32h": "Ternary",
    "p33p": "The ternary is an expression.",
    "p34p": "To understand how ternary works, we will do an exercise together:",
    "p35rq": "Input 2 numbers from the console. Output the larger number to the console.",
    "p36p": "I will write the problem in pseudocode. Write it in your language of choice, as a kind of challenge. There is no difference between a ternary in pseudocode, Java and C#.",
    "p37p": "First, we take two numbers from the console:",
    "p38pc": "int num = input();\nint num1 = input();",
    "p39p": "The question is: How to find and store the larger number? This is where ternary comes in:",
    "p3pre": "true && true = true",
    "p40pc": "int bigger = (num > num1)? num : num1;",
    "p41p": "Try to understand what ternary does without me explaining it to you.",
    "p42p": "Did you try?",
    "p43p": "First we have a variable. It's called \"bigger\". It has a type of int. It is equal to the ternary.",
    "p44p": "In the ternary we first have a statement in parentheses - this is the condition.",
    "p45pc": "(num > num1)",
    "p46p": "Then we have \"?\". This means that the condition is complete.",
    "p47p": "Then comes the important part - the value of the ternary, if the condition is true - num. Then there is a separation using \":\". After that, there is the value if the condition is wrong - num1. The value of the ternary will also become the value of \"bigger\". Let's express this in words:",
    "p48p": "If the first number is greater than the second number, \"bigger\" will become equal to the first number. Otherwise, if the first number is less than or equal to the second number, \"bigger\" will become equal to the second number.",
    "p49p": "Have you figured it out yet?",
    "p4pre": "true && false = false",
    "p50p": "So, in any case, \"bigger\" will be the bigger number. We only need to output it:",
    "p51pc": "print(bigger);",
    "p52p": "The whole exercise becomes:",
    "p53pc": "int num = input();\nint num1 = input();\nint bigger = (num > num1)? num: num1;\nprint(bigger);",
    "p54p": "Did you write this program in your language?",
    "p55rq": "To finish this lesson, I will give you another problem. Imagine that you are a professor at a university. You gave an exam to your students with a maximum of 100 points. You want to make a program in which you enter the points per student. The program then outputs the student's grade - it's calculated by the formula (points*6)/100 (I know, probably pretty sparing for a university). Finally, if the student has a score greater than or equal to 3, you output to the console \"Student Passes\". Otherwise, print \"Student does not pass\".",
    "p56p": "Good luck!",
    "p5pre": "false && true = false",
    "p6pre": "false && false = false",
    "p7p": "In code it is used where any other comparison can be made:",
    "p8pc": "bool b = 5 < 7 && 6 < 7;\nprint(b);",
    "p9p": "Result:",
    "text": "Where you'll learn how to compare... several times to once",
    "title": "Lesson 17"
  },
  "l18": {
    "p10w": "I will write in pseudocode here. I will start a new block of code with \"{\" on the same line. If you're using C#, remember that you have to put \"{\" и \"}\" on the next line.",
    "p11pc": "int inp = input();\nif (inp >= 0) {\n\tprint(\"Valid points\").\n\tint result = inp * 50;\n}\n// As shown here, you can have if without else - it doesn't matter.\nprint(result);",
    "p12p": "There is an error here - it is possible that the number \"in\" was less than 0. Then the if block was omitted and the \"result\" variable was never created, so it cannot be printed. Any language would show an error for this.",
    "p13p": "The code blocks after if and else, as long as they are one line, can be written without {}. They just need to be spaced correctly from the beginning of the line (identation is important). This is handy in some cases, but personally I don't use it often:",
    "p14pc": "int num = 5;\nbool isEven = num % 2 == 0;\nif (isEven)\n\tprint(\"Even\");\nelse print(\"Odd\"); // You can even place it on the same line",
    "p15p": "Here we create the variable num. Then we have the boolean variable \"isEven\". It is equal to \"num % 2 == 0\". This is the check for an even number - % is division by a remainder, as you know. If the number is even and you divide it by 2, the remainder will always be zero - \"46 % 2 = 0\". If you want to check for an odd number, you can use \"num % 2 == 1\" or \"if (!isEven)\" (to reverse the value of isEven by \"!\"). Then comes the reason for the similar naming of boolean variables - you get an almost valid English sentence - \"if (isEven)... else...\". This makes it easier to read. Then we have the first line, which doesn't need a block of code and is just on a new line. After that is the \"else\", the spacing and the code.",
    "p16p": "The last thing I need to explain to you in this lesson is \"else if\" - but it seems I've already done half the work. Let's go back to the first example. There we have a general case if a number is negative and equal to zero. We can fix that with an \"else if\".  \"else if\" just a concatenated \"if\" next to the \"else\" of another if written, but on the same line - as in the example above:",
    "p17pc": "int num = 0;\nif (num > 0) {\n\tprint(\"The number is positive\");\n}\nelse if (num < 0) {\n\tprint(\"The number is negative\");\n}\n// This is the same as writing\n// else {\n// \tif() {}\n// }\nelse {\n\tprint(\"The number is 0\");\n}",
    "p18p": "Result:",
    "p19con": "The number is 0",
    "p1p": "In the previous lesson, you learned about the boolean type and comparisons. In this lesson you will learn about the bigger (and more useful) brother of the ternary.",
    "p20p": "The first check is whether the number is greater than 0. It is not, so we skip this block. We go to the second check - else if. The number is not less than 0 either, so we skip that block. We go to else, in which \"The number is 0\" is printed to the console.",
    "p21p": "As you noticed, there were no questions in this lesson either, and you may have already guessed that I'm going to give you an exercise. You are right:",
    "p22rq": "Accept an integer \"x\" from the console. If it is greater than 60, output a new number using the formula x*60 - 10. If equal to 60 or greater than 20, output a new number using the formula x*20 - 5. If it does not fit either of these conditions, derive a new number using the formula x*(-1) + 10.",
    "p2p": "First, I want to tell you that like other things, boolean types have a naming convention. The convention is to write the name in the following format: isClicked. I didn't mention it on purpose until now, and you'll see why in the rest of this tutorial.",
    "p3p": "if. else. These are the two most important words for this lesson - \"if\" and \"else\". This is how you check something in code. For example, if the button is pressed, execute one block of code. If a statement is true, execute a block of code. Otherwise, execute another block of code. Let's see the example:",
    "p4ds1": "Java",
    "p8p": "The number is -2. When we get to \"if\", we have parentheses. There's the statement - in this case, it's a condition. If it's correct, we execute the first block of code and move on, skipping the second. The result in the console is \"The number is positive\". If it is not true, as in our case, we skip the first block of code and we go directly to the second, which is after \"else\". The result to the console is \"The number is negative or zero\".",
    "p9p": "Code blocks can use variables that are already declared above them; if you create a variable in an \"if\" or \"else\" block, you can't use it downwards, since it may never be created. For example:",
    "s5cj": "package tutorial;\n\npublic class Ifs {\n\t\n\tpublic static void main(String[] args) {\n\t\tint num = -2;\n\t\tif (num > 0) {\n\t\t\tSystem.out.println(\"The number is positive\");\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"The number is negative or zero\");\n\t\t}\n\t}\n}",
    "s6ds2": "C#",
    "s7cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tint num = -2;\n\t\tif (num > 0) \n\t\t{\n\t\t\tConsole.WriteLine(\"The number is positive\");\n\t\t}\n\t\telse \n\t\t{\n\t\t\tConsole.WriteLine(\"The number is negative or zero\");\n\t\t}\n\t}\n}",
    "text": "Where you will learn how to control a program",
    "title": "Lesson 18"
  },
  "l19": {
    "p10p": "Now you will solve another problem. It is a classic. You have to accept a number of points from the console. If they are equal to or above 90, print \"Excellent\" to the console. If they are below 90 and equal to or above 80, print \"Very Good\". Below 80 and equal to or above 70 - \"Good\". Below 70 and equal to or above 60 - \"Average\". For anything below 60, print \"Poor\".",
    "p11rq": "What is unique about this exercise? Isn't it solvable with many \"if else\"? Yes, it is, but you won't solve it like that. I want you to solve this problem using \"switch\". And I'm not going to be the one explaining it to you - look it up on the internet, look at websites. Your task for this lesson is to search, not to solve. Because I can't explain everything to you - and if you want to program, you'll be looking for a long time. A tip from me - it's faster to read an article on a website than to watch a video.",
    "p12p": "Good luck!",
    "p1p": "In this lesson mainly need to tell you about nested if's. Why? It's in the syllabus.",
    "p2p": "As you might guess, you can put more ifs in the code block of an if statement. We will demonstrate it with the following problem:",
    "p3rq": "Create a string with the value \"The number\". If a number is even to 3, add \" is even to 3\" to the string. If it is both even and 5, add \" and 5\" to the string. Finally, output the string to the console.",
    "p4p": "Try to solve the problem yourself before looking at the code. It's easy. Remember that if a number is divisible by another number without remainder, then it is divisible by it.",
    "p5ds1": "Java",
    "p9p": "Try to explain this code the way I usually do. Read it out loud and play with it. Even change the exercise itself if you want.",
    "s6cj": "package tutorial;\n\npublic class Ifs {\n\t\n\tpublic static void main(String[] args) {\n\t\tString result = \"The number\";\n\t\tint num = 15;\n\t\tif (num % 3 == 0) {\n\t\t\tresult += \" is even to 3\";\n\t\t\t\n\t\t\tif (num % 5 == 0) {\n\t\t\t\t\t\tresult += \" and 5\";\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n}",
    "s7ds2": "C#",
    "s8cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tstring result = \"The number\";\n\t\tint num = 15;\n\t\tif (num % 3 == 0) {\n\t\t\tresult += \" is even to 3\";\n\t\t}\n\t\tif (num % 5 == 0) {\n\t\t\tresult += \" and 5\";\n\t\t}\n\t\tConsole.WriteLine(result);\n\t}\n}",
    "text": "Where you will learn how to write checks",
    "title": "Lesson 19"
  },
  "l2": {
    "p10fq": "How much is 10101101 + 01100110?",
    "p11h": "Subtraction",
    "p12pre": "\n101\n-\n011\n010",
    "p13p": "Here, we first subtract 1 from 1. We get 0, and write it down. Then we try to subtract 1 from 0.  But we can't, because 0 is less than 1. So, we take 1 from the next column. We get 2-1, which is now 1. We write the 1 down. Then, we need to subtract 1-0. However, we have taken 1, so that leaves us with 0-0. We write 0 down. And we have the result. Let's check: 101 is 5. 011 is 3. 010 е 2. So we have worked correctly.",
    "p14fq": "Write down the result of 10011 – 101",
    "p15h": "Multiplication",
    "p16p": "The multiplication of binary numbers is exactly the same as that of decimal numbers. There is no difference. It is important to remember that you are adding binary numbers, not decimal numbers.",
    "p17pre": "\n1101*11 \n  1101\n 1101\n100111",
    "p18fq": "Write down the result of 101*011",
    "p19h": "Division",
    "p1p": "In this lesson you will learn to add, multiply, subtract and divide using other number systems. Like the whole topic of other number systems, this is not complicated.",
    "p20p": "Division of numbers in other number systems is relatively harder. The easiest way is to convert the numbers to decimal, divide them, and convert the result to binary. For example:",
    "p21pre": "\n110 / 011\n110 = 1 * 4 + 1*2 + 0*1 = 6\n011 = 0*4 + 1*2 + 0*1 = 3",
    "p22p": "We now see that 6/3 = 2. We convert 2 to binary and get 010. Therefore:",
    "p23pre": "110 / 011 = 010",
    "p2h": "Addition",
    "p3p": "Let's first add two numbers in decimal - 96 and 56.",
    "p4pre": "\n96 \n + \n 56 \n152",
    "p5p": "You have done this many times - you put the two numbers under each other. You add the first column from right to left. If the total is less than 10, you write it down at the bottom. If it's greater than or equal to 10, like 12, you put one in the next column and write the last digit - 2 (or written another way, the difference of 12 and 10). Repeat this with all columns.",
    "p6p": "Adding numbers in binary is actually the same. Only instead of keeping track of 10, we keep track of 2 - the base of the system. That is, if the sum of a column is less than 2, we write it down, otherwise we put one on the next column and write down the difference of the sum and 2. Let's give it a try:",
    "p7pre": "\n101 \n + \n 011 \n1000",
    "p8p": "First we add 1 and 1. We get 2, which equals two. Therefore, we write 1 above the next column and write 2-2 = 0. On the next column we add 0 and 1 and get 1, but we have 1, therefore the sum is 2. We put 1, write 0 and continue. On the next column we add 1 and 0, we get 1. We have 1, add that too, and get 2. We write 1 on the next column. We write down 0. The last column is blank, so we just write 1 (from the previous 1). We get 1000. Let's do a check. 101 is 5. 011 is 3. 1000 is 8. So we have worked correctly.",
    "text": "Where you will learn how to add and subtract numbers... again",
    "title": "Lesson 2"
  },
  "l20": {
    "p13p": "I hope you had a \"Eureka\" moment when you saw the code above. If you haven't, it's obviously my turn to explain. As above, we are creating a num variable. It is equal to 0. Then we have a while and a condition. As long as that condition is met, the code in the block will continue to execute. That means, if we stop the code every time it takes a step, we'll have something like this:",
    "p14p": "num is 0, less than 10. Continue the loop.",
    "p15p": "num++;",
    "p16p": "num is 1, less than 10. Continue the loop.",
    "p17p": "num++;",
    "p18p": "num is 2, less than 10. Continue the cycle.",
    "p19p": "num++;",
    "p1p": "It is time to go back in time. To the distant times of the Assembly language. Besides its many other problems, it couldn't repeat an action multiple times. All programmers had was checks and goto. A goto is a rather archaic command because it can affect the stack in unexpected ways. When you reach a goto <line> command, the code execution goes to the given line. In this tutorial, I'll use our pseudocode with the goto command because Assembly is not intended to be a tutorial. If you're further interested, you can take a look at what it looks like on the web.",
    "p20p": "...",
    "p21p": "num is 10, 10 is not less than 10. Break the cycle.",
    "p22p": "And the code continues to execute.",
    "p23p": "But you might notice a slight problem - in the goto code, we first add one to num and then the loop starts. And here, we start adding only after checking the condition the first time. There is a solution for this problem - do {} while();",
    "p24p": "Let's the code:",
    "p25ds1": "Java",
    "p29p": "The difference is that the code in the do block will execute at least once before the condition check. That is, the program is something like this:",
    "p2pc": "int num = 5;\ngoto 1;",
    "p30p": "num++;",
    "p31p": "num is 1, less than 10. Continue the loop.",
    "p32p": "num++;",
    "p33p": "num is 2, less than 10. Continue the loop.",
    "p34p": "num++;",
    "p35p": "num е 3, по-малко от 10. Продължи цикъла.",
    "p36p": "num++;",
    "p37p": "...",
    "p38p": "num is 10, 10 is not less than 10. Break the cycle.",
    "p39p": "There is a different approach for the above problem - using an infinite loop and break;. break can be used in loops, and if the code reaches it, it ends the loop. Sam explained how the infinite loop is made:",
    "p3p": "This is the simplest possible example of a goto. The program starts at line 1, creates a variable with value 5, goes to goto 1; and returns to the first line. This is a cyclic action - it repeats many times. Such code is called a loop. The name \"loop\" has stuck to this day, even though (for good reasons) goto is a non-existent command in most languages, and nowadays we use more \"civilized\" methods. However, we'll stay in the past for another example.",
    "p40ds1": "Java",
    "p44p": "In the infinite loop (while (true)), at each step we add 1 to the variable num. If the value of num is less than 10, we skip the if code block and continue. If it is not, we reach break;, which breaks the while loop. We continue the program.",
    "p45rq": "Create a program that accepts an integer x from the console. Then use a loop to step through each number from 1 to 100. If x is divisible by a number in the loop without a remainder, which means, x is a multiple of it, print that number to the console.",
    "p4p": "The cycle above has one big problem - it will never stop. It will keep running until the program shuts down. That's not a bad thing - it's actually how we keep every program alive - whether it's your browser or your favorite game, somewhere in the program in question is a similar loop that keeps everything running.",
    "p5p": "The stopping problem is solved in a very easy way:",
    "p6pc": "int num = 0;\nnum++;\nif (num < 10) {\n\tgoto 2;\n}",
    "p7p": "First we create the num variable. Then we add one to it. If num is less than 10, we go back to line 2 and add one again. This will continue until num is 10. Then the condition num < 10 will not be correct and the program will continue, exiting the loop.",
    "p8p": "Let's return to the present. For the above code we would use while() {} (\"while\"). Here it is - exactly translated, with the same result:",
    "p9ds1": "Java",
    "s10cj": "int num = 0;\nwhile (num < 10) {\n\tnum++;\n}",
    "s11ds2": "C#",
    "s12cc": "int num = 0;\nwhile (num < 10) \n{\n\tnum++;\n}",
    "s26cj": "int num = 0;\ndo {\n\tnum++;\n} while (num < 10);",
    "s27ds2": "C#",
    "s28cc": "int num = 0;\ndo \n{\n\tnum++;\n} while (num < 10);",
    "s41cj": "int num = 0;\nwhile (true) {\n\tnum++;\n\tif (num < 10) {\n\t\tbreak;\n\t}\n}",
    "s42ds2": "C#",
    "s43cc": "int num = 0;\nwhile (true) \n{\n\tnum++;\n\tif (num < 10) \n\t{\n\t\tbreak;\n\t}\n}",
    "text": "Where you will learn why programs don't close immediately",
    "title": "Lesson 20"
  },
  "l21": {
    "p13p": "This is what is expected of you - you create a variable with an initial value of 1000. As long as it is greater than 0, print its current value and subtract 1. At some point it will get to zero, the loop will stop and the program will end.",
    "p14p": "That's a lot of writing, though. Let's divide this loop into several parts.",
    "p15p": "First you create a variable for the loop to work with.",
    "p16p": "Then you have the condition for the loop to work.",
    "p17p": "At the end you have a subtraction of 1 from the variable - insurance that the loop will stop.",
    "p18p": "In between all this, there is a single line of code that is part of the program logic. Everything else is just to make the loop work - 3-4 lines. Imagine if there were 10 lines of logic in the loop - it would get confusing what you do with the controlling variable.",
    "p19p": "We can do better than that!",
    "p1p": "In this lesson you will learn the last type of loop - for.",
    "p20p": "For this purpose we will use the for loop. It takes each of these 3 parts, and combines them into one - variable creation, condition and variable manipulation.",
    "p21p": "The variable that makes the for loop move is conventionally called just \"i\". It comes from iterator because loops \"iterate\" using it (go through it). If there is another loop in the loop, or for some other reason \"i\" is already a used variable name, you continue in alphabetical order - \"j\". If \"j\" isn't free either, you continue to \"k\", \"l\", \"m\", \"n\", \"o\"... (if you get to \"o\" I recommend that you get up, turn off the computer, take a walk in nature and wonder what you're doing).",
    "p22p": "Time to see the for loop code using the above problem:",
    "p23ds1": "Java",
    "p27p": "In the brackets of the for loop, the language expects 3 things - the first is creating variables. It doesn't matter what you create there - you can create a String if you want, or just leave it blank. Then there's a semicolon, and the second thing follows - a condition. It doesn't matter what the condition is, as long as it can evaluate to true or false. If you want, you can just write true inside and it will create an infinite loop (remember there is a break; command). Then again, semicolon. Last is the manipulation - it can also be empty, or it can be i++, i--. You can use i = i * 5. As long as the value of the variable changes (or doesn't, if the whole field is empty), the loop will execute.",
    "p28rq": "Get a string from the console. Then, using a for loop, print it to the console inverted. Revise how to take a character in a specific index in a string and how you get the length of a string. Don't forget that you can print without a new line, or you can concatenate to a blank string. ,",
    "p2p": "Представи си следната ситуация - трябва да направиш програма, която принтира числата от 5 до 1 на конзолата. \"Лесно!\", казваш ти, и създаваш нещо от този род:",
    "p3pc": "print(5);\nprint(4);\nprint(3);\nprint(2);\nprint(1);",
    "p4p": "Result:",
    "p5con": "5\n4\n3\n2\n1",
    "p6p": "\"Great!\", you say, having solved the problem. Suddenly your teacher comes to you and says, \"Now make it print the numbers from 1000 to 1!\".",
    "p7p": "Bad. You think of loops and create this:",
    "p8rq": "Before looking at the code, try to solve the problem by yourself.",
    "p9ds1": "Java",
    "s10cj": "int countdownNumber = 1000;\nwhile (countdownNumber > 0) {\n\tSystem.out.println(countdownNumber);\n\tcountdownNumber--;\n}",
    "s11ds2": "C#",
    "s12cc": "int countdownNumber = 1000;\nwhile (countdownNumber > 0) \n{\n\tConsole.WriteLine(countdownNumber);\n\tcountdownNumber--;\n}",
    "s24cj": "for (int i = 1000; i > 0; i--) {\n\tSystem.out.println(i);\n}",
    "s25ds2": "C#",
    "s26cc": "for (int i = 1000; i > 0; i--) \n{\n\tConsole.WriteLine(i);\n}",
    "text": "Where you will learn how to count",
    "title": "Lesson 21"
  },
  "l22": {
    "p10p": "This is the text part. The code is next:",
    "p11ds1": "Java",
    "p15p": "Result:",
    "p16con": "George",
    "p17con": "Peter",
    "p18p": "That's nice but do we really have to make an array with 10 or more elements and initialize them one by one, row by row? That was half the problem in the original problem!",
    "p19p": "There's a solution for that too. There is another way to initialize arrays:",
    "p1p": "Imagine you had a list of 10 names. You need to add them into a program so that you can access them later. How would you do it?",
    "p20ds1": "Java",
    "p24p": "Result:",
    "p25con": "George",
    "p26con": "Peter",
    "p27p": "In this code we use direct initialization by {}. The elements of the array separated by commas are written in these parentheses. The size of the array is automatically inferred - in this case 3. Each element assumes its index according to the order in which they are written - here \"Victor\" is 0. This avoids multiple rows.",
    "p28rq": "Choose 10 first and 10 last names. Fill 2 arrays with them. Each time the program is run, the console should display a message, using the template \"Hello, <randomly selected first name from array> <randomly selected last name from array>\". Play around with the combinations or add more names.",
    "p2p": "As of now, you don't have much choice - you have to make a lot of variables. A lot. Later, whenever you need to use a name, you have to use one of the variables. But suddenly your boss comes along and says:",
    "p3p": "- I want the program to show different names every time it opens!",
    "p4p": "This can be done with your current knowledge - with lots of ifs or a huge switch. However, what do we do if the names become 100 or 1000? (we probably don't write the names in the code, but use a text file and load the names from it, but let's ignore that in the name of the example)",
    "p5p": "Arrays exist for this purpose. Arrays are lists. Each thing in the list is an element. Each array has a type - this is the type of the elements in the array. An array with a string type cannot contain an integer. Arrays have a specific size that cannot be changed after the array is created. Each element corresponds to an index. Indexes start at 0. This may sound familiar because strings do use the same system - after all, a string is just a list of characters, in other words, an array of characters.",
    "p6p": "Arrays seem convenient for our case, don't they? We have a list of names. We can make an array, put the names inside, and we have a variable with all the information we need. Using the indexes, we can choose an exact element - an exact name, or we can generate a random number and thus take a random name from the array.",
    "p7p": "Arrays are displayed with [] after the type. Аn array of integers is int[]. When we create an array, we need to determine how many elements it can contain. The indices start from 0. That means, in an array of size 10, the first index will be 0 and the last will be 9. Fortunately for you, if you try to reach an index that doesn't exist in Java or C# (e.g. 10 in an array of size 10), it will give you an error. Why should you be happy? In some of the older languages, the index is assumed to exist and is taken from subsequent bytes in memory. Let's say that this causes some problems",
    "p8p": "When you create an array, the indexes are filled with a unique value - null. It's not a string or an integer, it's just nothing. As long as you don't use the index to change that value, it will sit like that.",
    "p9p": "If you go into the toilet and see that there is toilet paper in a holder, then you have a value - for example, the string \"toilet paper\". If there is no toilet paper on the holder, just a roll, you have an empty string - \"\". You can still put toilet paper, there is \"something\". If you go in and see that the holder is empty, that's null - no toilet paper and no roll. You might not guess that the holder is for toilet paper, just as a programming language can't guess anything about null. The last type of state is undefined. It only exists in some languages (not Java or C#), the most famous of which is JavaScript. It's like if the holder was ripped out and there was nothing there. No holder, no roll, no toilet paper.",
    "s12cj": "package tutorial;\n\npublic class ArraysTutorial {\n\n\tpublic static void main(String[] args) {\n\t\tString[] names = new String[3]; // Create an array of strings with 3 elements\n\t\t//  Currently all elements are null, so we have to assign values to them when we reach them\n\t\t// This is done through the index\n\t\tnames[0] = \"Viktor\";\n\t\tnames[1] = \"Theodora\";\n\t\tnames[2] = \"George\";\n\t\tSystem.out.println(names[2]); // Array elements are just variables; we can do whatever we want with them\n\t\t// Later we can also change a value in an index\n\t\tnames[2] = \"Peter\";\n\t\tSystem.out.println(names[2]);\n\t}\n\n}",
    "s13ds2": "C#",
    "s14cc": "using System;\n\npublic class ArraysTutorial \n{\n\n\tpublic static void Main()\n\t{\n\t\tstring[] names = new string[3]; // Create an array of strings with 3 elements\n\t\t//  Currently all elements are null, so we have to assign values to them when we reach them\n\t\t// This is done through the index\n\t\tnames[0] = \"Viktor\";\n\t\tnames[1] = \"Theodora\";\n\t\tnames[2] = \"George\";\n\t\tConsole.WriteLine(names[2]); Array elements are just variables; we can do whatever we want with them\n\t\t// Later we can also change a value in an index\n\t\tnames[2] = \"Peter\";\n\t\tConsole.WriteLine(names[2]);\t\n\t}\n\n}",
    "s21cj": "package tutorial;\n\npublic class ArraysTutorial {\n\n\tpublic static void main(String[] args) {\n\t\tString[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tSystem.out.println(names[2]); \n\t\tnames[2] = \"Peter\";\n\t\tSystem.out.println(names[2]);\n\t}\n\n}",
    "s22ds2": "C#",
    "s23cc": "using System;\n\npublic class ArraysTutorial \n{\n\n\tpublic static void Main()\n\t{\n\t\tstring[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tConsole.WriteLine(names[2]); \n\t\tnames[2] = \"Peter\";\n\t\tConsole.WriteLine(names[2]);\n\t}\n}",
    "text": "Where you will learn how to work with a lot of information",
    "title": "Lesson 22"
  },
  "l23": {
    "p10p": "In that case, maybe you really need to learn how to print arrays.",
    "p11p": "When you want to print an array, you want to print its elements to the console this way:",
    "p12p": "Expected result:",
    "p13con": "Viktor\nTheodora\nGeorge",
    "p14p": "You could do something like that:",
    "p15ds1": "Java",
    "p19p": "Which would have the expected result... until the array has 10 items. Or 50. What do we do at 1000? And with a size entered by the user?",
    "p1p": "In this tutorial, I'll teach you how to print arrays to the console. I'm not kidding.",
    "p20p": "So we need a repeated action driven by an integer type variable. It must have an initial value of 0 and increment by 1 at each iteration. And when it reaches a maximum value, the iteration should stop. Hmmmmmm, where have I seen this before? We can use a for loop, but we need the length of the array. In Java we use names.length, in C# we use names.Length. Both are integers indicating the length of an array. For any other array, we just change the variable name.",
    "p21p": "Code:",
    "p22ds1": "Java",
    "p26p": "Result:",
    "p27con": "Viktor\nTheodora\nGeorge",
    "p28p": "We create an array with 3 elements. Then we write a for loop. The first index in the array is 0, so the variable i has initial value 0. At each iteration, we increment i by 1 using i++. The condition is whether i is less than the size of the array. The array size is 3, but this is not a valid index (2 is the maximum because the array starts at 0). Therefore, we use <. 0 is less than 3, so we print the first element. 1 is also less than 3. 2 is less than 3. When we get to 3, it is not less than 3 (the length), but equal to 3, so the loop stops. At each iteration we print the element with index equal to i.",
    "p29p": "Actually, when I told you that the for loop was the last loop I lied to you. There is one more. It's known as the foreach loop and it saves you writing for easier iteration through arrays tasks. It looks like this:",
    "p2p": "Right now you're probably wondering \"Can't I just do this?:\"",
    "p30ds1": "Java",
    "p34p": "In this loop we write a variable of the array type, then the array itself, as shown in the code. At each iteration, the variable changes its value according to the number of iterations. In this case, on the first iteration the variable is \"Victor\", on the second it is \"Theodora\" and on the third it is \"George\". Once it is done with the array, the loop stops. Foreach is faster to write because you save the condition and the counter variable, but it doesn't have the capabilities of normal for. However, it's perfect for fast printing like in our case.",
    "p35rq": "Create 2 arrays by filling the first with first names and the second with last names. When the program starts, ask the user how many pairs of names they want. Accept an integer. Then, using a loop, generate the entered number of personal-last name pairs, with the names randomly selected from both arrays. Print them to the console, printing one pair on each line.",
    "p36rq": "Make a program that requires the user to input how many numbers they want to input, then input the numbers themselves. Output the sum of the numbers. Don't forget that you can take input from the console in loops. This problem can be solved without arrays, so give it a try.",
    "p37p": "Example:",
    "p38p": "Input:",
    "p39con": "3 // that means that you should expect 3 numbers\n1\n6\n3",
    "p3ds1": "Java",
    "p40p": "Output:",
    "p41con": "10 // the sum of 1, 6 and 3",
    "p7p": "Yes, you can. You won't even get it wrong. In fact, give it a try. Right now.",
    "p8p": "Did you try?",
    "p9p": "I assume you've already tried and gotten either \"[Ljava.lang.String;@random number\" if you're working with Java, or \"System.String[]\" if you're working with C#.",
    "s16cj": "package tutorial;\n\npublic class ArraysTutorial {\n\tpublic static void main(String[] args) {\n\t\tString[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tSystem.out.println(names[0]);\n\t\tSystem.out.println(names[1]);\n\t\tSystem.out.println(names[2]);\n\t}\n}",
    "s17ds2": "C#",
    "s18cc": "using System;\n\npublic class ArraysTutorial \n{\n\tpublic static void Main()\n\t{\n\t\tstring[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tConsole.WriteLine(names[0]);\n\t\tConsole.WriteLine(names[1]);\n\t\tConsole.WriteLine(names[2]);\n\t}\n}",
    "s23cj": "package tutorial;\n\npublic class ArraysTutorial {\n\tpublic static void main(String[] args) {\n\t\tString[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\tSystem.out.println(names[i]);\n\t\t}\t\n\t}\n}",
    "s24ds2": "C#",
    "s25cc": "using System;\n\npublic class ArraysTutorial \n{\n\tpublic static void Main()\n\t{\n\t\tstring[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tfor (int i = 0; i < names.Length; i++) {\n\t\t\tConsole.WriteLine(names[i]);\n\t\t}\n\t}\n}",
    "s31cj": "package tutorial;\n\npublic class ArraysTutorial {\n\tpublic static void main(String[] args) {\n\t\tString[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tfor (String ime : names) {\n\t\t\tSystem.out.println(ime);\n\t\t}\t\n\t}\n}",
    "s32ds2": "C#",
    "s33cc": "using System;\n\npublic class ArraysTutorial \n{\n\tpublic static void Main()\n\t{\n\t\tstring[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tforeach (string ime in names) {\n\t\t\tConsole.WriteLine(ime);\n\t\t}\n\t}\n}",
    "s4cj": "package tutorial;\n\npublic class ArraysTutorial {\n\tpublic static void main(String[] args) {\n\t\tString[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tSystem.out.println(names);\n\t}\n}",
    "s5ds2": "C#",
    "s6cc": "using System;\n\npublic class ArraysTutorial \n{\n\tpublic static void Main()\n\t{\n\t\tstring[] names = {\"Viktor\", \"Theodora\", \"George\"};\n\t\tConsole.WriteLine(names);\n\t}\n}",
    "text": "Where you will understand the connection between the last lessons",
    "title": "Lesson 23"
  },
  "l24": {
    "p10p": "{2, 5, 4, 6, 8} remains {2, 5, 4, 6, 8} because 6 < 8, so no substitution takes place",
    "p11p": "The first pass ends.",
    "p12p": "The second pass begins - again starting with the first number, this time 2. Repeat the action.",
    "p13p": "{2, 5, 4, 6, 8} remains {2, 5, 4, 6, 8} because 2 < 5",
    "p14p": "{2, 5, 4, 6, 8} becomes {2, 4, 5, 6, 8} because 5 > 4",
    "p15p": "{2, 4, 5, 6, 8} remains {2, 4, 5, 6, 8} because 5 < 6",
    "p16p": "{2, 4, 5, 6, 8} remains {2, 4, 5, 6, 8} because 6 < 8",
    "p17p": "The third pass is completed. We see that the array is now sorted. Your program has no way of knowing this, on the other hand. Another pass begins. In this pass, there won't be a single shift. This means that the array is already sorted.",
    "p18p": "Maybe now you understand why this algorithm is slow. All those passes, all those shifts. In fact, if your array has 5 elements, this algorithm will take 5*5 units of time - 5 passes by 5 checks, if we don't stop it as soon as there's been no shift in a pass. If there are 100 elements, it becomes 10,000 units of time. Let's try something else.",
    "p19h": "Selection sort",
    "p1p": "In this lesson I will teach you how to sort arrays. And a few more things.",
    "p20p": "Selection sort is a simple sorting method. Unfortunately, it has the same speed problem as Bubble sort. The fastest method at the time of this writing should be Quicksort. But anyway, the school curriculum requires you to know Selection sort.",
    "p21p": "Let's take our array again - {6, 2, 5, 3, 8}. This algorithm also deals with passes.",
    "p22p": "We choose the first number - 6. This is the minimum for now. Then we compare 6 with 2. 2 is less, therefore 2 becomes the minimum. Then we compare 2 with 5, 3 and 8. None of these numbers is less than the minimum (2), so finally 6 and 2 switch places. The array becomes {2, 6, 5, 3, 8}.",
    "p23p": "For the second pass, the second number in the array becomes our minimum. In this case, it is 6. We perform a comparison with 5. 5 is less than 6, so 5 becomes the minimum. 3 is less than 5, so 3 becomes the minimum. 8 is not less than 3, so 3 remains the minimum at the end of the pass. It swaps positions with the second number in the array. The array becomes {2, 3, 5, 6, 8}.",
    "p24p": "On the third pass, the third number is the minimum - 5. 5 is less than 6 and less than 8, which means the array is sorted and does not need to be changed. Most implementations would continue with a fourth and fifth pass, but we'll end here.",
    "p25p": "Now, I want you to open your IDE and write these algorithms in code. Before both implementations are ready, don't even think about coming back here.",
    "p26a1": "Yes",
    "p26a2": "No",
    "p26tq": "Did you write the code for the sorting algorithms?",
    "p27h": "My solution",
    "p28ds1": "Java",
    "p2p": "The sorting of arrays is done by certain algorithms. We will try 2 of them. I wouldn't memorize them if I were you, but if you want, the choice is yours.",
    "p32p": "Result:",
    "p33con": "2\n3\n5\n6\n8",
    "p3h": "Bubble sort",
    "p4p": "Bubble sort is one of the slowest sorting methods. It is also one of the simplest.",
    "p5p": "You have the array of numbers {6, 2, 5, 3, 8}.",
    "p6p": "The algorithm begins iterating through the array numbers. The first iteration through all numbers begins. The following happens to the array:",
    "p7p": "{6, 2, 5, 4, 8} becomes {2, 6, 5, 4, 8} because 6 > 2",
    "p8p": "{2, 6, 5, 4, 8} becomes {2, 5, 6, 4, 8} because 6 > 5",
    "p9p": "{2, 5, 6, 4, 8} becomes {2, 5, 4, 6, 8} because 6 > 4",
    "s29cj": "package tutorial;\n\nimport java.util.Arrays;\n\npublic class Sort {\n\t\n\tpublic static void main(String[] args) {\n\t\tint[] arr = {6, 2, 5, 3, 8};\n\t\tArrays.sort(arr);\n\t\t\n\t\tfor(int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t}\n}",
    "s30ds2": "C#",
    "s31cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tint[] arr = {6, 2, 5, 3, 8};\n\t\tArray.Sort(arr);\n\n\t\tfor(int i = 0; i < arr.Length; i++) \n\t\t{\n\t\t\tConsole.WriteLine(arr[i]);\n\t\t}\n\t}\n}",
    "text": "Where you'll learn how to sort... and how not to.",
    "title": "Lesson 24"
  },
  "l25": {
    "p11p": "The second number for size is 6 - this is the amount of columns. The first is 5 - it is the amount of rows per column. That means, this matrix will have 6 columns with 5 rows each.",
    "p12p": "If we wanted to change the number in row 3 in column 4, we would write:",
    "p13ds1": "Java",
    "p17p": "It's normal to be confused by this. I do it too when I work with matrices.",
    "p19ds1": "Java",
    "p19p": "To help you out, we're going to print the console matrix. This is done via a nested loop - we have an iteration to go through each array in the array, and another iteration to go through the selected array's numbers. To make it easier for you, I'm going to use a foreach loop for Java. Try doing it with a normal for. If you're in C#, look up why I don't do the example using foreach",
    "p1p": "Imagine a table. It has columns and rows. Each column and each row has a unique identifier. When a column is intersected a cell is formed. Each cell has an address, a combination of the identifiers of the intersecting column and row. There is a list of columns and a list of rows. In fact, we can represent each of the columns as simply a list of rows. An array is a type which means we can create an array of arrays - a list of columns, with each column being a list of rows. We're going to do just that in this tutorial.",
    "p23rq": "Create a matrix with 10 columns, each with 10 rows. Fill it with randomly generated numbers. Research diagonals in matrices. Then output the sum of all the numbers on the main diagonal multiplied by the difference of all the numbers on the secondary diagonal.",
    "p2p": "This may sound complicated, and indeed it is. It's not used very often, but it's nice to know it for that one time it will come up.",
    "p3p": "The normal array is one-dimensional. It is simply a list of elements. If we use array as the type for an array's elements, we get an array full of arrays. Each index has an array full of its own indices and elements. This is a two dimensional array.",
    "p4p": "You can guess yourself what an array of arrays of type array is called.",
    "p5p": "Two-dimensional arrays are also called matrices. The pixels on your screen arranged in columns and rows are also a matrix. How do you think each pixel is represented programmatically?",
    "p6p": "This creates a two-dimensional array:",
    "p7ds1": "Java",
    "s10cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tint[,] matrix = new int[5, 6];\n\t}\n}",
    "s14cj": "package tutorial;\n\npublic class Matrix {\n\t\n\tpublic static void main(String[] args) {\n\t\tmatrix[3][4] = 5;\n\t}\n}",
    "s15ds2": "C#",
    "s16cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tmatrix[3, 4] = 5;\n\t}\n}",
    "s20cj": "package tutorial;\n\npublic class Matrix {\t\n\tpublic static void main(String[] args) {\n\t\tint[][] matrix= new int[5][6];\n\t\t\n\t\tfor(int[] i : matrix) { // i is of type int[] because arr is an array of arrays\n\t\t\tfor (int j : i) { // j is an element of the array i\n\t\t\t\tSystem.out.print(j); // so we can print the number j\n\t\t\t}\n\t\t\tSystem.out.println(); // after we have printed all numbers from one array, we print a new row and continue to the next\n\t\t}\n\t}\n}",
    "s21ds2": "C#",
    "s22cc": "using System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tint[,] arr= new int[5, 6];\n\t\tfor (int i = 0; i < arr.GetLength(0); i++) // .GetLength(0) returns the size of the array of arrays - the first dimension, counted as 0\n\t\t{ \n\t\t\tfor (int j = 0; j < arr.GetLength(1); j++)  // .GetLength(1) returns the size of an array from the list of arrays - the second dimension, counting from 1\n\t\t\t{ \n\t\t\t\tConsole.Write(arr[i, i]); // We want the number on the current column and row\n\t\t\t}\n\t\t\tConsole.WriteLine(); // after we have printed all numbers from one array, we print a new row and continue to the next\n\t\t}\n\t}\n}",
    "s8cj": "package tutorial;\n\npublic class Matrixes {\n\t\n\tpublic static void main(String[] args) {\n\t\tint[][] matrix = new int[5][6];\n\t}\n}",
    "s9ds2": "C#",
    "text": "Where you will learn that there are more than 1 dimension",
    "title": "Lesson 25"
  },
  "l26": {
    "p10p": "\"This calculation!\", Daniel pushes him a few sheets of paper, \"There's a much more efficient way of doing it! Better!\"",
    "p11p": "Peter's tired gaze sweeps over the pages like a scanner searching for its target. He finds what he is looking for. Suddenly his blood stops. He takes a more serious look at one of the sheets, his expression growing paler and paler with each line, until finally it looks as if his hand could pass through his face.",
    "p12p": "\"I can't replace that! Not today!\" he almost shouts",
    "p13p": "\"But, why?\" Daniel asks, \"It's just a calculation!\"",
    "p14p": "\"Yes, but it's all over the program! No chance I'll find all the places it's in, today! And in too many variations for \"Search and Replace\" to work!\" Peter's voice rings louder and more desperate",
    "p15p": "Daniel thinks for a few seconds. Almost wisely, he notes:",
    "p16p": "\"Well, I guess we can postpone it until Monday. Until later!\" says Daniel",
    "p17p": "His hurried footsteps are heard again and Daniel leaves the room.",
    "p18p": "\"Woof!\" thinks Peter, \"I've managed to save my skin\". His face relaxes and he enjoys the warmth generated by his blood returning to its place, trying not to think about how long the change will take next week.",
    "p19p": "Suddenly, the office door opens abruptly again. \"Why would he come back?\" wonders Peter when he realizes that the footsteps are not Daniel's. They are heavy and sonorous, very different from the light step of the mathematician.",
    "p1p": "Peter is human. A programmer. He works in a medium-sized company.",
    "p20p": "The insight passes through his brain like a flash, and Peter feels the blood drain from his face again. Like a wire, he rises from his chair to greet the man standing before him. At about 6 feet tall (1,90 meters), Peter can hide completely in his shadow.",
    "p21p": "\"I heard about the new version of the calculation\" a thick voice is heard, typical of a person who has smoked a pack of cigarettes a day for the last 20 years",
    "p22p": "\"Yeah, boss, Daniel just gave me the instructions. I'm starting the swap now, but I'll finish it next week\" Peter's voice almost trembles, startled by the sudden appearance of his manager.",
    "p23p": "\"That's exactly what I wanted to talk about\" says the boss, \"I want the change ready by the end of the working day\"",
    "p24p": "\"But how come, boss,\" Peter replies, horrified, \"I don't have enough time!\"",
    "p25p": "\"You'll find it!\" says the boss, \"This weekend we'll be presenting our company software to a few other companies to sell it to them. I want no delays and everything to be perfect!\"",
    "p26p": "\"But,  but...\"",
    "p27p": "\"No \"but\"s\"",
    "p28p": "\"Right, boss...\" Peter is responds silently, \"I'll try to finish it today!\"",
    "p29p": "\"That's how I want you!\" the boss almost smiles, \"I believe in you!\"",
    "p2p": "Friday. Sunny but frosty February day. The clock shows 14:00. \"Just a little more and the weekend is coming\", thinks Peter, looking at the reflection of the sun in the thin snow cover outside. \"I just have to hold out a little longer,\" his mind races.",
    "p30p": "The manager turns and walks out of the room.",
    "p31p": "Peter straddles the swivel chair, desperate. \"But how am I going to do it! There are so many places with this calculation, with all sorts of variables.\"",
    "p32p": "He turns to the computer and starts typing, knowing full well that his peace of mind is over for the day.",
    "p33p": "I hope you enjoyed my little attempt at writing. I certainly had fun writing it. Believe it or not, this story has direct relevance to today's lesson. While Peter is busy rethinking his workplace and his life, I'll show you the thing that can solve his problems. In this lesson, I'm going to introduce you to a tool in programming that lets isolate a piece of code and just call it by name. A tool that you can use to change the code in just one place, and have an impact in every other place you've used the name - functions.",
    "p34p": "The first thing I want to make clear is that \"function\" and \"method\" are synonymous. There are certain rules for using them, but nowadays they are almost always interchangeable.",
    "p35p": "Second, functions are just naming code. The whole idea is: you grab a piece of code, give it a name, take arguments, then do the code, and finally it returns a result.",
    "p36p": "For example, you have to use x*4 many times in a program where x is a variable of type integer. In the future, this might become x*6. So you take x*4 and turn it into a function - you give it a name, like multiplyX. Then you take an argument - int x. After you execute the code, you use return to return the value. That way, you can use multiplyX instead of x*4 anywhere, and when your mad scientist comes, you can just change the code in multiplyX, and everywhere else will just be multiplyX and you won't edit anything else.",
    "p37p": "Third - there cannot be two functions with the same name in the same class unless they take different arguments. Two mult functions that take integers int is not acceptable, but if one takes int and the other takes float, no problems. In Java, the functions are namedLikeThis (camelCase) and in C# they are namedLikeThis (PascalCase).",
    "p38p": "Fourth - each function, when called, gets its own piece of the stack. That means it cannot access the variables of the functions before it. It is limited to only its arguments and the variables created in the class. If a function, such as main, calls mult, it stops in place and starts executing the code in mult. It does its thing and returns its result to main, which can continue executing.",
    "p39p": "Fifth - functions have modifiers. For example, public and private indicate whether a function is public (that means other classes have access to it) or not. static indicates whether the function can be called directly as part of a class (System.out.println() or Console.WriteLine(), where System.out and Console are the classes) or only from its variables (e.g. rand.nextInt(), but not Random.nextInt()). For now, we will only write \"public static\" methods. These modifiers are followed by the type the function will return - int, String, int[], double, float, Random, etc. The special return type is void. Void means that the method returns nothing, like main. The name follows. After the name, there are parentheses separated by commas to record the arguments the function will accept. They can be of any type. It is usually not a good sign if a function has more than 5-6 arguments, although the recommended number is 1-4. Functions have a single purpose and should not do too many things.",
    "p3p": "Right now, he must be facing the monitor in front of him, adding new features to the company's program and solving problems. He's the only one working on it right now. His other colleague took 1 week off yesterday to go skiing.",
    "p40p": "Last - function arguments are passed by reference in Java and usually in C#. This means that if you edit the argument in the function, you edit the original variable - this is how Arrays.sort()/Array.Sort() works - the function edits and modifies the array. Except in cases like this, it is normal for functions not to edit their arguments.",
    "p41p": "Let's see the main method:",
    "p42ds1": "Java",
    "p46p": "Main is a public static void - public, static and does not return a value - so we never wrote return. After that is the name of the method/functions - main and the arguments in parentheses. In this case the argument is one - an array of strings \"args\" - all the arguments from the console collected as strings in an array. You can use args in main like any other variable.",
    "p47p": "Functions are called by writing the name of the function, then parentheses and the arguments - that means if when we created the function we wrote that it takes argument int, then in the parentheses we can write 5, but not 8.6",
    "p48p": "The moment a function reaches return, it stops execution and returns to the front. That is, any code written after return is \"dead\" - it will not execute. It is important to note that each path of the function must return a value - if the entire function consists of an if-else block, there must be a return in both the if block and the else block.",
    "p49p": "Now let's look at our own example.",
    "p4p": "Or at least the only one that should work. With this weather, the mood for work is as frostbitten and dead as any thing showing its nose in the cold without a jacket.",
    "p50ds1": "Java",
    "p54rq": "Create a method that calculates the average of 3 integers. Then create a method with the same name and in the same class that calculates the average of 3 real numbers (of float or double type - your choice).",
    "p5p": "The office door opens abruptly and the sound of quick, excited footsteps breaks the deafening silence in the room. Peter knows who it is before he even lifts his head from his hands.",
    "p6p": "\"I've found something!\" sounds the excited voice of Daniel, the company mathematician.",
    "p7p": "Daniel is the stereotypical \"mad\" scientist, the heir apparent to Einstein, solving cubic equations on napkins, scribbling with mud as he climbs Everest. He fits the stereotype so well that one would think he had white, messy hair, as if he'd been electrocuted. That's not quite true.",
    "p8p": "The truth is that it is actually Daniel who is \"developing\" the program. It does some serious financial calculations, well beyond Peter's comprehension. Daniel says what needs to be done, gives sheets of instructions and leaves him and his colleague to just write the code and tie things together. That's Peter's job.",
    "p9p": "Even before Daniel has opened his mouth once more, Peter knows his Friday calm has been disturbed for the moment. \"What's up?\" says he in a bored voice.",
    "s43cj": "package tutorial;\n\npublic class Methods {\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n}",
    "s44ds2": "C#",
    "s45cc": "using System;\n\npublic class Methods \n{\n\tpublic static void Main(string[] args)\n\t{\n\t}\n}",
    "s51cj": "package tutorial;\n\npublic class Methods {\n\tpublic static int multiplyX(int x) {\n\t\treturn x*4;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint x = multiplyX(5);\n\t\tint y = multiplyX(x);\n\t\tSystem.out.println(multiplyX(y) + multiplyX(4));\n\t}\n}",
    "s52ds2": "C#",
    "s53cc": "using System;\n\npublic class Methods \n{\n\tpublic static int MultiplyX(int x)\n\t{\n\t\treturn x*4;\n\t}\n\n\tpublic static void Main(string[] args) \n\t{\n\t\tint x = MultiplyX(5);\n\t\tint y = MultiplyX(x);\n\t\tConsole.WriteLine(MultiplyX(y) + MultiplyX(4));\n\t}\n}",
    "text": "Where you will learn how to organize your program",
    "title": "Lesson 26"
  },
  "l27": {
    "p11p": "If you run this code, you will very quickly notice a rather long error in the console.",
    "p12p": "In recursion, there is usually a stop condition:",
    "p13ds1": "Java",
    "p17p": "In this code, the sum function accepts an integer. It then checks if it is 0, and if it is, returns 0. If it returns 0, the function stops and does not reach the next return. If it does not return 0, it reaches the next return, where it returns the current x + the result of the function with argument x - 1. That means the execution goes something like this:",
    "p18p": "main begins its execution",
    "p19p": "sum gets called with argument 3",
    "p1p": "In this lesson we will learn about recursion.",
    "p20p": "3 does not equal 0",
    "p21p": "3 + sum(3 - 1) gets returned",
    "p22p": "sum gets called with argument 2",
    "p23p": "2 does not equal 0",
    "p24p": "2 + sum(2 - 1) gets returned",
    "p25p": "sum gets called with argument 1",
    "p26p": "1 does not equal 0",
    "p27p": "1 + sum(1 - 1) gets returned",
    "p28p": "sum gets called with argument 0",
    "p29p": "0 equals 0, therefore sum returns 0",
    "p2p": "Recursion is relatively difficult to understand. It's rarely used, it's complicated to read, it's hard to imagine the logic, but you have to know what it is. Fortunately for me, it can be explained in one sentence.",
    "p30p": "We can now calculate 1 + sum(1-1), which is 1 + 0. We return 1",
    "p31p": "We can now calculate 2 + sum(2-1), which is 2+1. We return 3",
    "p32p": "We can now calculate 3 + sum(3-1), which is 3 + 3. We return 6",
    "p33p": "And now we have the result of sum, so we print it to the console",
    "p34p": "We check if 3 + 2 + 1 is really 6.",
    "p35rq": "Make a program that takes a number input and outputs its factorial. Use recursion.",
    "p36p": "Example:",
    "p37p": "Input:",
    "p38con": "5",
    "p39p": "Output:",
    "p3p": "Recursion is a recursive action.",
    "p40con": "120 (5*4*3*2*1)",
    "p41p": "You should have done this task earlier, but using loops. Which solution do you like better?",
    "p4p": "Indeed, that is all - recursion is a recursive action. This definition is recursive. If you use it, you'll wonder what a recursive action is, which again takes you to the definition of recursion, and the loop repeats.",
    "p5a1": "action that is unique",
    "p5a2": "action that is repeated",
    "p5tq": "Recursion is:",
    "p6p": "In programming, recursion occurs when a function calls itself. It is used for some calculations, such as Fibonacci series and factorial. However, loops are often preferred because every time you call a function, it is added onto the stack. The stack has a limit, which usually does not show up as a problem. On the other hand, with recursion it is very common to reach and exceed this limit, resulting in a program end and a \"StackOverflow\" error. Let's cause a StackOverflow:",
    "p7ds1": "Java",
    "s10cc": "using System;\n\npublic class Methods \n{\n\tpublic static void Overflow() \n\t{\n\t\tOverflow();\n\t}\n\n\tpublic static void Main(String[] args) \n\t{\n\t\tOverflow();\n\t}\n}",
    "s14cj": "package tutorial;\n\npublic class Methods {\n\tpublic static int sum(int x) {\n\t\tif (x == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn x + sum(x - 1);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(sum(3));\n\t}\n}",
    "s15ds2": "C#",
    "s16cc": "using System;\n\npublic class Methods \n{\n\tpublic static int Sum(int x) \n\t{\n\t\tif (x == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn x + Sum(x - 1);\n\t}\n\n\tpublic static void Main(String[] args) \n\t{\n\t\tConsole.WriteLine(Sum(3));\n\t}\n}",
    "s8cj": "package tutorial;\n\npublic class Methods {\n\tpublic static void overflow() {\n\t\toverflow();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\toverflow();\n\t}\n}",
    "s9ds2": "C#",
    "text": "Where you'll get confused",
    "title": "Lesson 27"
  },
  "l28": {
    "p16h": "Check if a string contains another string"
  },
  "l29": {
    "p10p": "These are the non-static methods and variables. They are said to belong to the object because they cannot be used by the class, only by its objects.",
    "p11p": "On the other hand, static variables and methods belong to the class. They don't have access to the information of an object, because there is none so you don't need to create one to use them either. Static methods can only perform actions on static variables and variables that are created in them. System.out.println() and Console.WriteLine() are static methods. They belong to System.out and Console, take an argument and print it, and they don't need any other information. The methods in the Math class are static because they each have highly specialized arguments. Static methods are called using the class name and the method name.",
    "p12p": "Accordingly, there is exactly one instance of each static variable. If we imagine that the String class has a static variable for maximum string size, then this variable exists in only one place because there is only one class. We can create 10,000 strings and each of them will have different characters, but the maximum length will be the same for all of them. If we change the static maximum length, it will change in the single instance. Each of these 10,000 strings will access it from its non-static methods and use the current value.",
    "p13p": "A blueprint requires parts to have a car, and a class requires information to create an object. Classes have a special method that is called to create an object, and it is given the information as arguments. This method is called a constructor. When you write new Scanner(System.in) in Java, you call the Scanner constructor with the System.in argument. The constructor constructs the object with this information and returns it.",
    "p14p": "Now, let's write some code.",
    "p15p": "First, create a new class (file) other than the one where you have the main method. Create it in the same package in Java and the same namespace in C#. It should not have a main method. Call it \"Book\". All class names start with a capital letter and AreNamedLikeThatCase (Pascal case). You should end up with something like this:",
    "p16ds1": "Java",
    "p1p": "We've reached classes, one of the most important concepts in programming. Let's dive into the lesson!",
    "p20p": "Now let's write down some variables. Write in the class as normal variables the string \"name\" for the name of the book, the string \"author\" for the author and the integer \"length\" for the length (in pages). Make them public, at least for now. In Java, class variables are named like normal variables, and in C#, they AreNamedLikeThis. You should have something like this:",
    "p21ds1": "Java",
    "p25p": "These are the variables that our final object will have. Now let's create the constructor. We have 3 variables in the class that we need to populate, so we'll take 3 variables as arguments to the constructor - name, author, and length:",
    "p26ds1": "Java",
    "p2p": "Actually, we've already seen quite a few classes and how they are used - Random, Scanner, String.",
    "p30w": "The constructor arguments have nothing to do with the class variables. It is accepted to name them with the same names for better readability.",
    "p31p": "The constructor is Book(). However, it is still empty - we have only defined the arguments. Now comes the tricky part - we need to give the variables of the newly created object the values given to the constructor, which means we need to access it somehow. This is done with \"this\". \"this\" is the object itself - that means we can use it to access the public name, author, length class variables instead of the arguments of the constructor:",
    "p32ds1": "Java",
    "p36p": "this.name is the \"name\" variable of the newly created object and we assign it the information passed to the constructor. Finally, we have only one task left - to give a method to the book. We'll name it getFullName()/GetFullName() (\"get full name\"). It will return a new string, a union of the name and the author. Let's do this:",
    "p37ds1": "Java",
    "p3p": "Classes are like \"general\" blueprints. They tell how something will be created. A \"general\" blueprint of a car dictates what should be on the car - engine, tank, battery, chassis. When we look at that blueprint, we don't know what the engine of the finished car will be or the capacity of the tank. We don't know the speed or the exact model of the battery. All we know is that this car has to have those things. The blueprint shows what components the finished car should have.",
    "p41p": "Great! You created your first class. Now let's test it in main in the main file. We have access to the public variables and methods in the class. I hope you remember how to create variables from classes:",
    "p42ds1": "Java",
    "p46p": "Result:",
    "p47con": "The Wizard of Oz - Lyman Baum\n176",
    "p48p": "Congratulations! You created your first class! In the next lesson we will continue the development of the class.",
    "p49rq": "Look around you and write something as a class - for example a Clothing or Furniture class.",
    "p4p": "Classes indicate what information should be stored in the completed objects. In Java, the Scanner class contains information that indicates what it should read. It requires it, in the same way that a car requires an engine. The Scanner class doesn't know what it will read, but the object created using it knows. The String class knows that it requires an \"array of characters\", but it doesn't know how long it will be or which characters it will contain.",
    "p5p": "The blueprint contains the information that the car will have an engine and a battery. It also contains the information that it will have headlights and a tank. This information, by itself, cannot make the car run. We need to describe how the parts will connect, how the current will flow through them, explain how the car is started so that the finished car can be used - we work with the components. In classes, this is expressed using methods.",
    "p6p": "In the String class, the characters of the string are information, but by itself, this information does nothing. For this reason, strings have methods like .substring(), .indexOf(). They work with the string itself and perform logical operations on it.",
    "p7p": "A class is the definitions of information that needs to be stored in it and how to work with it. The information is contained in variables, and the way to work with it is contained in methods.",
    "p8p": "When we use the drawing to create a car, the engine becomes real - it's no longer just \"we need an engine\", it's a real model. The speed of the car gets its value, the headlights get their power, the battery gets its model. Every thing becomes concrete - we are creating a new car. This new car is an object and it already has the things defined in the blueprint and can work with them.",
    "p9p": "Classes are types. We can create a variable with type this class, and the variable is an object of the class. The object has all the necessary information that is given to it when it is created and through its methods. The methods of the object can perform their operations because they have the necessary information.",
    "s17cj": "package tutorial;\n\npublic class Book {\n\n}",
    "s18ds2": "C#",
    "s19cc": "using System;\n\npublic class Book\n{\n\t\n}",
    "s22cj": "package tutorial;\n\npublic class Book {\n\tpublic String name;\n\tpublic String author;\n\tpublic int length;\n}",
    "s23ds2": "C#",
    "s24cc": "using System;\n\npublic class Book\n{\n\tpublic string Name;\n\tpublic string Author;\n\tpublic int Length;\n}",
    "s27cj": "package tutorial;\n\npublic class Book {\n\tpublic String name;\n\tpublic String author;\n\tpublic int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\t\n\t}\n}",
    "s28ds2": "C#",
    "s29cc": "using System;\n\npublic class Book\n{\n\tpublic string Name;\n\tpublic string Author;\n\tpublic int Length;\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\t\n\t}\n}",
    "s33cj": "package tutorial;\n\npublic class Book {\n\tpublic String name;\n\tpublic String author;\n\tpublic int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.name = name;\n\t\tthis.author = author;\n\t\tthis.length = length;\n\t}\n}",
    "s34ds2": "C#",
    "s35cc": "using System;\n\npublic class Book\n{\n\tpublic string Name;\n\tpublic string Author;\n\tpublic int Length;\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = length;\n\t}\n}",
    "s38cj": "package tutorial;\n\npublic class Book {\n\tpublic String name;\n\tpublic String author;\n\tpublic int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.name = name;\n\t\tthis.author = author;\n\t\tthis.length = length;\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.name + \" - \" + this.author;\n\t}\n}",
    "s39ds2": "C#",
    "s40cc": "using System;\n\npublic class Book\n{\n\tpublic string Name;\n\tpublic string Author;\n\tpublic int Length;\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = length;\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n}",
    "s43cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", 176);\n\t\tSystem.out.println(theWizardOfOz.getFullName());\n\t\tSystem.out.println(theWizardOfOz.length);\n\t}\n}",
    "s44ds2": "C#",
    "s45cc": "using System;\n\npublic class Classes\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", 176);\n\t\tConsole.WriteLine(theWizardOfOz.GetFullName());\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\t}\n}",
    "text": "Where you'll learn why it's called software engineering",
    "title": "Lesson 29"
  },
  "l3": {
    "p10p": "Unicode was created by a few people in 1991. It works with a few optimizations - the most commonly used characters are the first ones, and they are stored using only 8 bits, and the others are stored using 32. This allows for an incredible amount of characters - in the latest standard in 2021 there are 137,439 characters, covering 146 writing scripts, dead and alive, multiple symbols and emoji. Today it has several different versions, such as UTF-8, UTF-16, UTF-32. Nowadays it is used almost everywhere because of its huge variety.",
    "p11a1": "You get paid to use it",
    "p11a2": "Corruption",
    "p11a3": "It has the most symbols",
    "p11a4": "It takes the most storage",
    "p11tq": "Why is Unicode so popular?",
    "p12p": "This is what you'll need on how computers deal with characters.",
    "p13t": "Every letter and space that you write is a symbol that is stored as a number.",
    "p1p": "You have already understood that computers work only with zeros and ones - from the processor to the memory. You also know how computers represent our decimal numbers with just two digits, and how to perform arithmetic operations with them. Now comes the question, \"But how does it represent text?\"",
    "p2p": "First, we'll go back in time. The distant 1960s, when a group of people had to figure out a way to turn symbols into numbers. They though for a long time, and in 1963 ASCII (American Standard Code for Information Interchange, read \"ascii\") came out. It's a relatively simple solution - every symbol needed is associated with a number. The computer only stores the number, and can later read it and represent the symbol it corresponds to.",
    "p3p": "There are 128 characters in total, and each is stored in 7 bits.",
    "p4p": "33 of them cannot be printed - they are not visible in any way. They indicate commands such as end of title, paragraph, delete, etc.",
    "p5p": "Search the Internet for the ASCII table - the printable or non-printable characters with their corresponding letters. Before the lowercase letters are the uppercase letters and before the uppercase letters are the numbers and punctuation marks.",
    "p6p": "So every computer knows that, for example, character 32 is a blank space and character 61 is a non-capital latin \"a\".",
    "p7fq": "How many characters are there in ASCII?",
    "p8p": "You might be noticing a slight problem here - there are only the Latin characters, punctuation marks and numbers. What happens if you have a message in Cyrillic? Or in Japanese? What about Chinese? And where do the emoticons fit into this whole thing. And the answer is, well, nowhere. But that problem didn't appear for a long time. Countries that used unauthorized characters used different character encodings. But the problem appeared - on a computer with ASCII, 61 is a little \"a\". But what if it runs a file saved with an encoding in which 61 is an \"i\"? The answer is \"complete chaos.\" Not to mention that many alternative encodings were also created, such as Windows-1251, where 0438 (in base 16, that is 1080 in decimal) is \"and\". What happens when a computer trying to read ASCII, where there is no 1080 character, gets to this? The character is usually displayed as question marks.",
    "p9p": "These problems still occur today. Do not imagine that they have disappeared. But they are much less so, thanks to one reason - Unicode (from universal code, read \"unicode\", spelled unicode).",
    "text": "Where you will learn how text becomes zeros and ones",
    "title": "Lesson 3"
  },
  "l30": {
    "p13p": "Result:",
    "p14con": "-6\n-456",
    "p15p": "That means that to solve the problem we need to put a few checks in both places. The constructor is simple:",
    "p16ds1": "Java",
    "p1p": "In the previous lesson you wrote your first class. It looks like this:",
    "p20p": "Normally I don't like using the ternary operator, but in this case it's perfect - if the value given for pages in the constructor is less than 0 or greater than 30000 (I guess that's about double the maximum pages for a book), the class variable becomes 0",
    "p21p": "This solves one of our problems...",
    "p22ds1": "Java",
    "p26p": "Result:",
    "p27con": "0\n-456",
    "p28p": "...and not the other.",
    "p29p": "But what are we going to do to stop the change of... well... a variable? Isn't that its goal?",
    "p2ds1": "Java",
    "p30p": "That's why getters and setters exist. They are functions whose sole purpose is to provide and modify a class variable. Their name begins with get or set and the name of the variable. With their help, we can write whatever checks we want when we change the value of a variable and stop it if necessary.",
    "p31p": "This is also one of the places where Java and C# are quite different.",
    "p32ds1": "Java",
    "p36p": "And that should have fixed all problems now. Let's see:",
    "p37ds1": "v",
    "p52p": "Now no matter what we do, if we try to create a book object with more than 30000 pages or less than 0, the finished object will have 0 pages.",
    "p53p": "This principle of everything being as closed and controlled as possible in a single class is called encapsulation - in short, unless something is going to be used publicly, it should be private (or in C#, dependent on get and set). Private stops other developers from using anything other than the provided methods to manipulate the variable, and is a very good signal that unless they are working on the class, they shouldn't care about it.",
    "p54p": "Since we started anyway, let's add getters and setters to all variables in the class.",
    "p55ds1": "Java",
    "p59p": "As you may notice, Book is already pretty big, at least in Java. From now on, I won't write out all the getters and setters when I show the code.",
    "p60p": "There are more problems in this class. In programming, you should almost never repeat the same code twice - everything should be isolated in functions. In this class we have repeating code: \"(length < 0 || length > 30000)? 0 : length;\" occurs twice - in the constructor and in the setter of length. There's no point in that - we'll just use the setter in the constructor and let it do its job.",
    "p61ds1": "Java",
    "p65p": "Good. This looks almost perfect. Only one small detail remains. In the setter we compare for 0 and 30000. For us these numbers matter, but for some next programmer they might not. Those are called magic numbers, and it's not good practice to use them. Instead, it is accepted to isolate them into variables. These variables are common to all books, not separate for each one. That means these variables belong to the class or in other words they are static. We will name them minLength (minimum length) and maxLength (maximum length). Let's create them and use them:",
    "p66ds1": "Java",
    "p6p": "There is a slight problem with this class. It has to present a book. However, any number can be entered as a page count, including very large and negative ones. Good luck explaining to the librarian how a book can have -5 pages...",
    "p70p": "Now anyone reading the class can find out what those numbers are through the variables and change them. Since they are static and public, any other class can also access them through the class and not through an object:",
    "p71ds1": "Java",
    "p75p": "Result:",
    "p76con": "0\n30000",
    "p77p": "You don't have a task this time. I'm tired of writing the word \"problem\". In the next lesson we continue with the development of the class.",
    "p7p": "In this lesson we will solve this problem.",
    "p8p": "There are two ways to set the book length - one is through the constructor when the object is created. The other is through the variable itself. This allows us to do something like this:",
    "p9ds1": "Java",
    "s10cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", -6);\n\t\tSystem.out.println(theWizardOfOz.length);\n\t\ttheWizardOfOz.length = -456;\n\t\tSystem.out.println(theWizardOfOz.length);\n\t}\n}",
    "s11ds2": "C#",
    "s12cc": "using System;\n\npublic class Classes\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", -6);\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\t\ttheWizardOfOz.Length = -456;\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\n\t}\n}",
    "s17cj": "public Book(String name, String author, int length) {\n\tthis.name = name;\n\tthis.author = author;\n\tthis.length = (length < 0 || length > 30000)? 0 : length;\n}",
    "s18ds2": "C#",
    "s19cc": "public Book(string name, string author, int length) \n{\n\tthis.Name = name;\n\tthis.Author = author;\n\tthis.Length = (length < 0 || length > 30000)? 0 : length;\n}",
    "s23cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", -6);\n\t\tSystem.out.println(theWizardOfOz.length);\n\t\ttheWizardOfOz.length = -456;\n\t\tSystem.out.println(theWizardOfOz.length);\n\t}\n}",
    "s24ds2": "C#",
    "s25cc": "using System;\n\npublic class Classes\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", -6);\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\t\ttheWizardOfOz.Length = -456;\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\n\t}\n}",
    "s33cj": "package tutorial;\n\npublic class Book {\n\tpublic String name;\n\tpublic String author;\n\tpublic int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.name = name;\n\t\tthis.author = author;\n\t\tthis.length = (length < 0 || length > 30000)? 0 : length;\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.name + \" - \" + this.author;\n\t}\n\n\tpublic int getLength() {\n\t\treturn length;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = (length < 0 || length > 30000)? 0 : length;\n\t}\n}",
    "s34ds2": "C#",
    "s35cc": "using System;\n\npublic class Book\n{\n\tpublic string Name;\n\tpublic string Author;\n\tpublic int Length \n\t{\n\t\tget \n\t\t{\n\t\t\treturn this.Length;\n\t\t}\n\t\tset \n\t\t{ \n\t\t\tthis.Length = (value < 0 || value > 30000)? 0 : value;\n\t\t}\n\t}\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = (length < 0 || length > 30000)? 0 : length;\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n}",
    "s38p": "In Java, we can now use the methods we created. They solve our problems - now even if we try .setLength(-456), the length in the object will be exactly 0.",
    "s39cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", -6);\n\t\tSystem.out.println(theWizardOfOz.getLength());\n\t\ttheWizardOfOz.setLength(-456);\n\t\tSystem.out.println(theWizardOfOz.getLength());\n\t}\n}",
    "s3cj": "package tutorial;\n\npublic class Book {\n\tpublic String name;\n\tpublic String author;\n\tpublic int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.name = name;\n\t\tthis.author = author;\n\t\tthis.length = length;\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.name + \" - \" + this.author;\n\t}\n}",
    "s40p": "Result:",
    "s41con": "0\n0",
    "s42p": "However, there is still a problem with this solution. Nothing prevents us from writing this:",
    "s43cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", -6);\n\t\tSystem.out.println(theWizardOfOz.getLength());\n\t\ttheWizardOfOz.length = -456;\n\t\tSystem.out.println(theWizardOfOz.getLength());\n\t}\n}",
    "s44p": "...and the problem appears again. That's why there are public and private modifiers. We will make length private. Then only the methods in the Book class will have access to the variable and every other class will have to rely on the methods.",
    "s45cj": "public class Book {\n\tpublic String name;\n\tpublic String author;\n\tprivate int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.name = name;\n\t\tthis.author = author;\n\t\tthis.length = (length < 0 || length > 30000)? 0 : length;\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.name + \" - \" + this.author;\n\t}\n\n\tpublic int getLength() {\n\t\treturn length;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = (length < 0 || length > 30000)? 0 : length;\n\t}\n}",
    "s46p": "We can no longer use theWizardOfOz.length because it is private and will give us an error. We have to use theWizardOfOz.getLength() and theWizardOfOz.setLength().",
    "s47ds2": "C#",
    "s48p": "In C# we can continue to use the variable.",
    "s49cc": "public class Classes\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", -6);\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\t\ttheWizardOfOz.Length = -456;\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\n\t}\n}",
    "s4ds2": "C#",
    "s50p": "Result:",
    "s51con": "0\n0",
    "s56cj": "package tutorial;\n\npublic class Book {\n\tprivate String name;\n\tprivate String author;\n\tprivate int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.setName(name);\n\t\tthis.setAuthor(author);\n\t\tthis.length = (length < 0 || length > 30000)? 0 : length;\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.getName() + \" - \" + this.getAuthor();\n\t}\n\n\tpublic int getLength() {\n\t\treturn length;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = (length < 0 || length > 30000)? 0 : length;\n\t}\n\n\tpublic String getAuthor() {\n\t\treturn author;\n\t}\n\n\tpublic void setAuthor(String author) {\n\t\tthis.author = author;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}",
    "s57ds2": "C#",
    "s58cc": "using System;\n\npublic class Book\n{\n\tpublic string Name {get; set;}\n\tpublic string Author {get; set;}\n\tpublic int Length \n\t{\n\t\tget \n\t\t{\n\t\t\treturn this.Length;\n\t\t}\n\t\tset \n\t\t{ \n\t\t\tthis.Length = (value < 0 || value > 30000)? 0 : value;\n\t\t}\n\t}\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = (length < 0 || length > 30000)? 0 : length;\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n}",
    "s5cc": "using System;\n\npublic class Book\n{\n\tpublic string Name;\n\tpublic string Author;\n\tpublic int Length;\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = length;\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n}",
    "s62cj": "package tutorial;\n\npublic class Book {\n\tprivate String name;\n\tprivate String author;\n\tprivate int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.setName(name);\n\t\tthis.setAuthor(author);\n\t\tthis.setLength(length);\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.getName() + \" - \" + this.getAuthor();\n\t}\n\n\tpublic int getLength() {\n\t\treturn length;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = (length < 0 || length > 30000)? 0 : length;\n\t}\n…\n}",
    "s63ds2": "C#",
    "s64cc": "public class Book\n{\n\tpublic string Name {get; set;}\n\tpublic string Author {get; set;}\n\tpublic int Length \n\t{\n\t\tget \n\t\t{\n\t\t\treturn this.Length;\n\t\t}\n\t\tset \n\t\t{ \n\t\t\tthis.Length = (value < 0 || value > 30000)? 0 : value;\n\t\t}\n\t}\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = length;\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n}",
    "s67cj": "package tutorial;\n\npublic class Book {\n\tpublic static int minLength = 0;\n\tpublic static int maxLength = 30000;\n\tprivate String name;\n\tprivate String author;\n\tprivate int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.setName(name);\n\t\tthis.setAuthor(author);\n\t\tthis.setLength(length);\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.getName() + \" - \" + this.getAuthor();\n\t}\n\n\tpublic int getLength() {\n\t\treturn length;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = (length < minLength || length > maxLength)? 0 : length;\n\t}\n\n\tpublic String getAuthor() {\n\t\treturn author;\n\t}\n\n\tpublic void setAuthor(String author) {\n\t\tthis.author = author;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}",
    "s68ds2": "C#",
    "s69cc": "public class Book\n{\n\tpublic static int MinLength = 0;\n\tpublic static int MaxLength = 30000;\n\tpublic string Name {get; set;}\n\tpublic string Author {get; set;}\n\tpublic int Length \n\t{\n\t\tget \n\t\t{\n\t\t\treturn this.Length;\n\t\t}\n\t\tset \n\t\t{ \n\t\t\tthis.Length = (value < MinLength || value > MaxLength)? 0 : value;\n\t\t}\n\t}\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = length;\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n}",
    "s72cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(Book.minLength);\n\t\tSystem.out.println(Book.maxLength);\n\t}\n}",
    "s73ds2": "C#",
    "s74cc": "using System;\n\npublic class Classes\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tConsole.WriteLine(Book.MinLength);\n\t\tConsole.WriteLine(Book.MaxLength);\n\t}\n}",
    "text": "Where you will learn how to control access",
    "title": "Lesson 30"
  },
  "l31": {
    "p13p": "Constants are a very good sign to any other programmer that this value should not be changed unless they know what they are doing. Most static variables you are going to encounter will be constants. It's usually a bad sign to have a non-constant static variable. You'll find out the reasons for it yourself after enough time.",
    "p14p": "My first real programming \"project\" was a very simple card game in Java. I decided not to represent the deck of cards as a class, not even the cards themselves. The result was not something I would write today. At one point I was convinced that my code wasn't working because the IDE was coloring some of my variables the wrong color. Eventually I realized that I had made all the variables static. I was trying to create a new class object without a constructor and was hoping that all static variables would change their value. It didn't work. Somehow I finished the application. I'm still proud to some extent because it was the first time I did anything, but I sincerely hope after these 3 lessons about classes you have a better understanding than I had then.",
    "p15rq": "Remember when I gave you a class to make that represents an object around you? Go back into it and edit it with your new knowledge.",
    "p16p": "In these lessons, you learned the principles of don't repeat yourself (DRY) and encapsulation - two of the most important programming principles. You learned to create classes too, even though you haven't fully covered object-oriented programming yet. Nevertheless, you're one step closer to the end.",
    "p1p": "In last lesson, we created two static variables that contain information about the minimum and maximum number of pages of a book. That's nice, but we left a slight... security hole - anyone can do that:",
    "p2ds1": "Java",
    "p6p": "We can no longer create books with valid pages because our maximum is 30000 and our minimum is 40000. Someone will quit their job and put those lines somewhere randomly across some massive block of code. If you have the misfortune of not having a version control system or tests, good luck finding the problem.",
    "p7p": "We need to somehow prevent these two variables from changing their values during program execution - once they are created, they should never be changed outside of their creation location in the code.",
    "p8p": "In math, these numbers are called constants. Of course, in programming there are constants too. When a variable is a constant, it cannot change its value during program execution. The above code would give an error and not even compile. In Java, constants are denoted by \"final\", and in C# by \"readonly\". In C# there is also the word \"const\". It is slightly different from readonly and final in Java in that const variables are static by default and their value must be known before compilation, which means it is always initialized in the place of creation and finalized through compilation. On the other hand, readonly and final can also be initialized in the class constructor via a dynamically calculated value (e.g. using a user-supplied runtime value). In Java, the constants are NAMED_LIKE_THAT, and in C# they are NamedLikeThat. Let's move on to the code:",
    "p9ds1": "Java",
    "s10cj": "package tutorial;\n\npublic class Book {\n\tpublic static final int MIN_LENGTH = 0;\n\tpublic static final int MAX_LENGTH = 30000;\n\tprivate String name;\n\tprivate String author;\n\tprivate int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.setName(name);\n\t\tthis.setAuthor(author);\n\t\tthis.setLength(length);\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.getName() + \" - \" + this.getAuthor();\n\t}\n\n\tpublic int getLength() {\n\t\treturn length;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = (length < MIN_LENGTH || length > MAX_LENGTH)? 0 : length;\n\t}\n\n\tpublic String getAuthor() {\n\t\treturn author;\n\t}\n\n\tpublic void setAuthor(String author) {\n\t\tthis.author = author;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}",
    "s11ds2": "C#",
    "s12cc": "public class Book\n{\n\tpublic static readonly int MinLength = 0;\n\tpublic static readonly int MaxLength = 30000;\n\tpublic string Name {get; set;}\n\tpublic string Author {get; set;}\n\tpublic int Length \n\t{\n\t\tget \n\t\t{\n\t\t\treturn this.Length;\n\t\t}\n\t\tset \n\t\t{ \n\t\t\tthis.Length = (value < MinLength || value > MaxLength)? 0 : value;\n\t\t}\n\t}\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = length;\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n}",
    "s3cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tBook.minLength = 40000;\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", 173);\n\t\tSystem.out.println(theWizardOfOz.getLength());\n\t}\n}",
    "s4ds2": "C#",
    "s5cc": "using System;\n\npublic class Classes\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tBook.MinLength = 40000;\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", 176);\n\t\tConsole.WriteLine(theWizardOfOz.Length);\n\t}\n}",
    "text": "Where you will learn that there are non-variables",
    "title": "Lesson 31"
  },
  "l33": {
    "p10ds1": "Java",
    "p14p": "We have already implemented print() in both classes. We can now do this in main():",
    "p15ds1": "Java",
    "p19p": "Result:",
    "p1p": "In the last lesson, we looked at inheritance - at least regarding classes. Inheritance from classes is a pretty \"heavy\" task, and each class can only do it from one other class. Sometimes we just need to know that several different classes have a method in common. The other part of inheritance - interfaces - is responsible for this.",
    "p21": "This is the expected result.",
    "p22rq": "Search for anonymous functions (lambdas)",
    "p23rq": "Each class inherits from Object. Try overriding .toString()/.ToString() or .equals()/.Equals().",
    "p2p": "A class can inherit more than one interface. Birds can walk and some robots can walk too. This does not mean that we would represent birds and robots as inheriting from the same class. Interfaces represent a quality - something can fly, something can be sorted. Interfaces only have abstract methods. When a class inherits from an interface, it is required to implement all of its methods. In this tutorial, we will write an interface that indicates that something is printable. Let's get started:",
    "p3p": "First we will create an interface. For names usually have English adjectives of verb origin. In C# their names always start with I (capital \"i\" - from Interface). They are usually made in a new file. The interface will be named \"Printable\"(Java)/\"IPrintable\"(C#) (printable).",
    "p4ds1": "Java",
    "p8p": "This is the interface. We don't need anything else.",
    "p9p": "Now let's inherit it in Book and implement print():",
    "s11cj": "package tutorial;\n\npublic class Book implements Printable { // Interface inheritance is done with \"implements\"; \"implements\" usually follow \"extends\" if the class also inherits from another class; If more than one interface is inherited, the names are separated by commas\n\tpublic static final int MIN_LENGTH = 0;\n\tpublic static final int MAX_LENGTH = 30000;\n\tprivate String name;\n\tprivate String author;\n\tprivate int length;\n\n\tpublic Book(String name, String author, int length) {\n\t\tthis.setName(name);\n\t\tthis.setAuthor(author);\n\t\tthis.setLength(length);\n\t}\n\t\n\tpublic String getFullName() {\n\t\treturn this.getName() + \" - \" + this.getAuthor();\n\t}\n\t\n\tpublic String getBookType() {\n\t\treturn \"Book\";\n\t}\n\n\tpublic int getLength() {\n\t\treturn length;\n\t}\n\n\tpublic void setLength(int length) {\n\t\tthis.length = (length < MIN_LENGTH || length > MAX_LENGTH)? 0 : length;\n\t}\n\n\tpublic String getAuthor() {\n\t\treturn author;\n\t}\n\n\tpublic void setAuthor(String author) {\n\t\tthis.author = author;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic void print() {\n\t\tSystem.out.println(this.getFullName());\n\t}\n}",
    "s12ds2": "C#",
    "s13cc": "using System;\n\npublic class Book : IPrintable // Inheritence is done with \":\" again. If multiple interfaces, or a class and multiple interfaces are inherited, the names are separated by commas\n{\n\tpublic static readonly int MinLength = 0;\n\tpublic static readonly int MaxLength = 30000;\n\tpublic string Name {get; set;}\n\tpublic string Author {get; set;}\n\tpublic int Length \n\t{\n\t\tget \n\t\t{\n\t\t\treturn this.Length;\n\t\t}\n\t\tset \n\t\t{ \n\t\t\tthis.Length = (value < MinLength || value > MaxLength)? 0 : value;\n\t\t}\n\t}\n\t\n\tpublic Book(string name, string author, int length) \n\t{\n\t\tthis.Name = name;\n\t\tthis.Author = author;\n\t\tthis.Length = length;\n\t}\n\t\n\tpublic string GetBookType() \n\t{\n\t\treturn \"Книга\";\n\t}\n\t\n\tpublic string GetFullName() \n\t{\n\t\treturn this.Name + \" - \" + this.Author;\n\t}\n\t\n\tpublic void Print() \n\t{\n\t\tConsole.WriteLine(this.GetFullName());\n\t}\n}",
    "s16cj": "package tutorial;\n\npublic class Classes {\n\tpublic static void main(String[] args) {\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", 173);\n\t\ttheWizardOfOz.print();\n\t\tNovel longSock = new Novel(\"Pippi Longstocking\", \"Astrid Lindgren\", 350);\n\t\tlongSock.print();\n\t\t/*\n\t\tWhat I do below is one of the magic tricks of Java\n\t\tIt's called an anonymous class\n\t\tSometimes a function asks for an interface as an argument type\n\t\tYou can't create an object from an interface because the methods are abstract and don't really exist (don't do anything)\n\t\tFor this reason you can write something like the code below and write the methods in there\n\t\tIt's called an anonymous class because you actually create a new class that is empty and has inherited the interface\n\t\tThen you just fill in its methods and you get a finished object\n\t\tSince you didn't declare the class, you can't re-create it and it's anonymous\n\t\t*/\n\t\tPrintable anonymous = new Printable() {\n\t\t\tpublic void print() {\n\t\t\t\tSystem.out.println(\"Anonymous class\");\n\t\t\t}\n\t\t};\n\t\tPrintable[] printables = {theWizardOfOz, longSock, anonymous};\n\t\t\n\t\tfor (int i = 0; i < printables.length; i++) {\n\t\t    printables[i].print();\n\t\t}\n\t}\n}",
    "s17con": "The Wizard of Oz - Lyman Baum\nPippi Longstocking - Astrid Lindgren\nThe Wizard of Oz - Lyman Baum\nPippi Longstocking - Astrid Lindgren\nAnonymous class",
    "s17ds2": "C#",
    "s18cc": "using System;\n\npublic class Classes\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tBook theWizardOfOz = new Book(\"The Wizard of Oz\", \"Lyman Baum\", 173);\n\t\ttheWizardOfOz.Print();\n\t\tNovel longSock = new Novel(\"Pippi Longstocking\", \"Astrid Lindgren\", 350);\n\t\tlongSock.Print();\n\t\tIPrintable printable = theWizardOfOz;\n\t\tprintable.Print();\n\t}\n}",
    "s18con": "The Wizard of Oz - Lyman Baum\nPippi Longstocking - Astrid Lindgren\nThe Wizard of Oz - Lyman Baum",
    "s5cj": "package tutorial;\n\npublic interface Printable {\n\tvoid print();\n}",
    "s6ds2": "C#",
    "s7cc": "using System;\n\npublic interface IPrintable {\n\tvoid Print();\n}",
    "text": "Where you will learn that interfaces are not only graphical",
    "title": "Lesson 33"
  },
  "l34": {
    "p10p": "Next, we will declare that we want a type argument using <T>. Once we have written this, T can now be used as a type throughout the class and will be required as an argument when creating an object of the class.",
    "p11ds1": "Java",
    "p15p": "Now let's write the constructor. It will accept a variable of type T, which we will call \"value\". We will store it in a variable (property) of the class:",
    "p16ds1": "Java",
    "p1p": "A long time ago I was reading some code and noticed something strange - after the names of some classes there was strange syntax - \"<type>\". I sat and wondered what it could be. I opened my browser and started looking. In the process, I found that search engines actually ignore special characters like \"<\" and \">\", the consequences of which you can guess. At some point I accidentally came across the name of the operator - \"diamond operator\". Armed with this information, I again headed to the depths of the Internet. Eventually, I found what I was looking for in a video about C#. Known by a disturbing amount of different names, this tutorial will teach you about \"Generics\".",
    "p20p": "Now we want to create getters and setters. If you use Java, notice how we return and accept variables with type T.",
    "p21ds1": "Java",
    "p25p": "We can now create an object of the Box class by providing a type argument and values for the constructor. Тype arguments are written after the type name - e.g. \"Box<Book>\" is a type Box where the type argument is Book, so everywhere in the object T is Book.",
    "p26ds1": "Java",
    "p2p": "In this tutorial we will create a Box class. The idea is not complicated - the class stores a single variable given to it via its constructor. There's just one problem - we don't know the type of the variable.",
    "p30p": "Result:",
    "p31con": "a\nThe Wizard of Oz",
    "p32p": "We can also restrict the accepted types to those that inherit from a specific class or interface.",
    "p33ds1": "Java",
    "p37p": "In these examples, T could only be of a type that inherits from Book.",
    "p38p": "More than one type argument can be expected as long as the arguments are separated by commas. Usually the second one is named V (e.g. \"Pair<T, V>\" - a class representing a pair of variables and accepting two different type arguments to be types for its two variables). Constraints on types can still be applied.",
    "p39e": "In Java Generics works only with classes which means the primitive types int, float, double, short, long, char, boolean cannot be type arguments. If you need to use one of these types as arguments, you have to use their corresponding classes - Integer, Float, Double, Short, Long, Character, Boolean. These classes also have some helper static and non-static conversion methods, etc.",
    "p3p": "Generics (\"generics\", comes from generic) solve this. They allow us to take the type of a variable as an argument.",
    "p40p": "You have no assignment for this lesson.",
    "p4p": "Let's get started.",
    "p5p": "First we will create the Box class.",
    "p6ds1": "Java",
    "s12cj": "package tutorial;\n\npublic class Box<T> {\n}",
    "s13ds2": "C#",
    "s14cc": "public class Box <T>\n{\n}",
    "s17cj": "package tutorial;\n\nclass Box<T> {\n\tprivate T value;\n\t\n\tpublic Box(T x) {\n\t\tthis.value = x;\n\t}\n}",
    "s18ds2": "C#",
    "s19cc": "class Box<T> \n{\n\tpublic  T Value;\n\t\n\tpublic Box(T x) \n\t{\n\t\tthis.Value = x;\n\t}\n}",
    "s22cj": "package tutorial;\n\nclass Box<T> {\n\tprivate T value;\n\t\n\tpublic Box(T x) {\n\t\tthis.value = x;\n\t}\n\t\n\tpublic T getValue() {\n\t\treturn this.value;\n\t}\n\t\n\tpublic void setValue(T newValue) {\n\t\tthis.value = newValue;\n\t}\n}",
    "s23ds2": "C#",
    "s24cc": "class Box<T> \n{\n   public T Value {get; set;}\n\t\n\tpublic Box(T x) \n\t{\n\t\tthis.Value = x;\n\t}\n}",
    "s27cj": "package tutorial;\n\npublic class Generics {\n\tpublic static void main(String[] args) {\n\t\tBox<String> box = new Box<String>(\"\");\n\t\tbox.setValue(\"a\");\n\t\tSystem.out.println(box.getValue());\n\t\tBox<Book> bookBox = new Box<Book>(new Book(\"The Wizard of Oz\", \"Lyman Baum\", 173));\n\t\tSystem.out.println(bookBox.getValue().getFullName());\n\t}\n}",
    "s28ds2": "C#",
    "s29cc": "using System;\npublic class Generics\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tBox<String> box = new Box<String>(\"\");\n\t\tbox.Value = \"a\";\n\t\tConsole.WriteLine(box.Value);\n\t\tBox<Book> bookBox = new Box<Book>(new Book(\"The Wizard of Oz\", \"Lyman Baum\", 173));\n\t\tConsole.WriteLine(bookBox.Value.GetFullName());\n\t\t\n\t}\n}",
    "s34cj": "package tutorial;\n\nclass Box<T extends Book> {\n}",
    "s35ds2": "C#",
    "s36cc": "class Box<T> where T : Book \n{\n}",
    "s7cj": "package tutorial;\n\npublic class Box{\n}",
    "s8ds2": "C#",
    "s9cc": "public class Box\n{\n}",
    "text": "Where you will learn how to store something you don't know anything about",
    "title": "Lesson 34"
  },
  "l36": {
    "p10p": "Exceptions are an unpleasant but expected part of programming. Errors happen, and sometimes they are serious enough that the program cannot continue execution - you can't recover from a division by 0.",
    "p11p": "However, you can't just have programs stop working because something didn't connect properly or a file refused to be read. Imagine a rocket with a billion-dollar satellite going down because a file wasn't opened properly and an Exception interrupted the execution of the control software. It would be the failure of the century.",
    "p12p": "This is why the try-catch-finally clause exists.",
    "p13p": "First, we have a try block. This is where we write the code that can cause an exception. Then there is a catch block. It is like a function that accepts an exception type that the try block is expected to throw. All exceptions are classes that inherit from a common class Exception, so if you don't know the exception type, you can just write \"Exception <some name>\". If an Exception that matches the type in the catch block appears in the try block, code execution breaks at the line in the try block where the exception appeared and proceeds to the code in the catch block. No error is printed to the console, and the program does not stop because the exception has been caught and the code in the catch block handles the recovery from it. If there is a finally block, it is always executed after all others, whether there is an exception or not. It is used for cleanup, e.g. closing a file opened in the try block. After everything is done, the program continues execution normally. Let's see an example:",
    "p14ds1": "Java",
    "p1p": "If you're reading this tutorial, I guess you've already seen a lot of console errors during the execution of your programs - scary long red messages, most of which are confusing.",
    "p20p": "Result:",
    "p21con": "catch\nfinally",
    "p22p": "We can also cause exceptions ourselves by using the keyword \"throw\" and an object of the Exception class (or any that inherits from it). The Exception constructor accepts a string, which is the error message. By the way, if you haven't noticed yet, everything talks about throwing and catching exceptions as if they were basketballs. Unfortunately, I couldn't trace where the names came from.",
    "p23ds1": "Java",
    "p2p": "They are called Exceptions. They occur when... well, there is an exception in your code. Code that doesn't conform to the rules of the language is an exception in the language. Together we caused StackOverflow when we talked about recursion. It's an exception to the maximum stack size rule.",
    "p32p": "Try-catch is a way to fix the obvious bugs - the ones that put huge red messages in the console and stop the program from running. However, not all errors are like that. Sometimes the result comes out 1 smaller than expected, or 1 bigger, and you have no idea how it happened. This is resolved by using the debugger (\"debugger\").",
    "p33p": "If you've gotten this far, you've probably printed a variable to the console in the middle of the program at least once to check its value. Unfortunately, the Debugger doesn't fix your bugs automatically like I thought before, but at least it lets you see the values of all the variables in the program (and many other things) at a precise line in the execution.",
    "p34p": "The main tool of any debugger are the so-called Breakpoints. In most IDEs, these are placed by pressing once (or several times) to the left of the line number where you want to place the breakpoint. If it works, a red dot will appear there. As long as the code is running in debug mode, execution will stop every time it gets to that line and let you look at the values of all the variables at that point.",
    "p35p": "The debugger is usually started by an icon close to the Run button. Most of the time it is shown as a literal cockroach (from bug), sometimes in a different way. Execution stops at breakpoints only when the program is running in debug mode.",
    "p36p": "When the program stops at a breakpoint, you have the option to see the state of the variables, usually in a side panel. You also have a couple of options - the first is usually \"step-over\", which goes to the next line of the current function. The second is usually \"step-in\", which goes into whatever function is called on the line. Most often the last option is \"Continue execution\", which continues the program normally until a new breakpoint is reached. There may also be a red square, which is the button to stop the execution of the program. It is not part of the Debug options, but is usually near them. These options are usually next to the Debug button.",
    "p37p": "Now I recommend you find an exercise you've done, put a breakpoint on each line, and run it through a Debugger to practice.",
    "p38rq": "Since you should already have the basic knowledge, look up how to open, read and close files in your language of choice. Create a simple text file, type something into it, and create a program that reads the contents of the file and prints them to the console.",
    "p3p": "Unlike compilation errors, Exceptions always happen during execution of a program.",
    "p4p": "The fastest way to cause an Exception is to divide a number by 0. This doesn't work in normal math and therefore it doesn't work in programming languages:",
    "p5ds1": "Java",
    "p9p": "In C#, the 5/0 division does not cause an Exception, but a compilation error, because the compiler pre-scans for such errors. To \"cheat\" the language, we divide by a variable equal to 0.",
    "s15cj": "package tutorial;\n\npublic class Exceptions {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tint num = 5 / 0;\n\t\t}\n\t\tcatch (ArithmeticException e) {\n\t\t\tSystem.out.println(\"catch\");\n\t\t}\n\t\tfinally {\n\t\t\tSystem.out.println(\"finally\");\n\t\t}\n\t}\n}",
    "s16t": "Check out the Exception type - ArithmeticException.",
    "s17ds2": "C#",
    "s18cc": "using System;\n\npublic class Exceptions\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\ttry {\n\t\t\tint zero = 0;\n\t\t\tint num = 5 / zero;\n\t\t}\n\t\tcatch (DivideByZeroException e) {\n\t\t\tConsole.WriteLine(\"catch\");\n\t\t}\n\t\tfinally {\n\t\t\tConsole.WriteLine(\"finally\");\n\t\t}\n\t}\n}",
    "s19t": "Notice the Exception type - DivideByZeroException.",
    "s24cj": "package tutorial;\n\npublic class Exceptions {\n\tpublic static void main(String[] args) throws Exception {\n\t\tthrow new Exception(\"Some error message\");\n\t}\n}",
    "s25p": "Check out how there is a \"throws Exception\" at the end of the main declaration. This means that this method can cause the given Exception and this is expected behavior, i.e. it is not in the try-catch. If this method is called elsewhere, the caller should surround it with try-catch or declare their own method as throwing the exception. Since there is no method before main, we can execute the program.",
    "s26p": "Result:",
    "s27con": "Exception in thread \"main\" java.lang.Exception: Some error message\n<<prefix>>\tat tutorial.Exceptions.main(Exceptions.java:5)",
    "s28ds2": "C#",
    "s29cc": "using System;\n\npublic class Exceptions\n{\n\tpublic static void Main(String[] args)\n\t{\n\t\tthrow new Exception(\"Some error message\");\n\t}\n}",
    "s30p": "Result:",
    "s31con": "Run-time exception (line 9): Some error message\n<<prefix>>\n<<prefix>>Stack Trace:\n<<prefix>>\n<<prefix>>[System.Exception: Some error message]\n<<prefix>>   at Exceptions.Main(String[] args) :line 9",
    "s6cj": "package tutorial;\n\npublic class Exceptions {\n\tpublic static void main(String[] args) {\n\t\tint num = 5 / 0;\n\t}\n}",
    "s7ds2": "C#",
    "s8cc": "using System;\n\npublic class Exceptions\n{\n\t\n\tpublic static void Main(String[] args)\n\t{\n\t\tint zero = 0;\n\t\tint num = 5 / zero;\n\t}\n}",
    "text": "Where you will learn how to fix your mistakes",
    "title": "Lesson 36"
  },
  "l37": {
    "p10p": "You can perform a join. This is the equivalent of stopping at a turn-off, waiting for thread 2 to disappear, and then moving on.",
    "p11p": "You can also perform sleep on a thread. This is the equivalent of freezing while driving along with the car and everything else around you. The only ones that keep working are the other treads.",
    "p12p": "Sometimes problems occur with threads. Imagine you need a street number written on a piece of paper in the glove compartment. You take it and it says 46. You look around, look at the slip of paper again and this time it says 23! How?",
    "p13p": "This happens because at the moment you weren't looking, thread 2 used the slip of paper from the glove compartment and wrote down on it the street number they dictated to him on the phone. You and thread 2 cannot communicate with each other, but if you both use the same piece of paper, the value can change illogically within hundredths of a second.",
    "p14p": "This is what happens with Threads if you're not careful. You can check if a variable is equal to 0. It's not equal, so you go to the if block and you're safe to divide by it. Suddenly, an Exception appears in the console. In the time between the two lines - the check and the division - thread 2 has managed to change the value of the variable to 0. This phenomenon is called a \"race condition\" because the two treads are \"racing\" to change the value. The worst part is that in another execution of the program, thread 1 may be faster than thread 2 and the error will not occur. Good luck finding a problem that happens every tenth execution of the program.",
    "p15p": "The main way to combat this is to simply not edit the same variables in 2 or more trades. If you have to, you can use synchronized blocks in Java and lock blocks in C#. They guarantee that the code in them will only be executed by 1 thread at a time. If one thread wants to execute the code while another is doing it, it will have to wait for the other to finish executing. These blocks can slow down the program considerably, but very often the time gains from executing multiple tasks simultaneously are greater.",
    "p16p": "Threads are used everywhere. For example, most games have at least 2 threads - 1 handles the game while another makes calls to the server and waits for a response. Most applications also have at least 2 threads - 1 deals with displaying graphics and the other deals with computation and complex operations. For this reason, the calculator's interface doesn't stop running while it calculates some huge value. Let's move on to the next way - async.",
    "p17p": "Using our car example again, you're again the main triad. You are again driving the car. Your phone is ringing again. But this time, instead of creating a new thread, you keep driving until you see a turn. You stop there, and only then do you pick up the phone. You make the call and you're on your way.",
    "p18p": "As you may notice, you don't actually do two things at the same time that way. The long task just gets put off until you have time. Javascript doesn't have threads for this reason - there's only one main thread and almost every other task is asynchronous. You can also use await, which means you stop driving in the middle of the riad, traffic stops, and you make the call - then you haven't completed your main task, but you have no choice - you have to stop. Then you continue on your way.",
    "p19p": "As of now, asynchronous execution is not very common. It's in Javascript, C#, Python, Kotlin. In Java, you have to rely on libraries created by other people if you want to use it. In some languages like C++ it is just now appearing, via the C++20 standard (2020).",
    "p1p": "You are driving a car. While driving the car, your phone rings.",
    "p20rq": "If you haven't noticed, I haven't written a single line of code in the entire lesson. Your task is to learn how to create and use threads in your language. If you're using C# (or there's already async in Java when you are reading this), find how to use async as well.",
    "p2p": "What can you do?",
    "p3p": "If you're a good member of society, you won't pick up the phone or you will use a hands free device. If you're not, you'll probably pick up the phone and talk while driving.",
    "p4p": "А computer doesn't have these options, however sometimes programmers need to run 2 or more task at the same time in one program.",
    "p5p": "There are two ways to implement this - threads and async (comes from \"asynchronous\").",
    "p6p": "Threads are the oldest and most common way. Almost every language has them, and the few that don't have them have very good excuses (e.g. Javascript). Using our car example, assume that you are the main thread. You're driving the car. When your phone rings, you, as the main thread, create another person - a second thread. You give him the phone with some information and tell him:",
    "p7p": "\"Talk\"",
    "p8p": "Тhe second person carries on the conversation while you drive. He doesn't realize where you're driving, and you can't hear what he's saying to the other person on the phone. The two of you exist separately from each other.",
    "p9p": "At some point, thread 2 ends the call, hands you back your phone and disappears.",
    "text": "Where you will learn how to do several things at once",
    "title": "Lesson 37"
  },
  "l39": {
    "p10p": "Go back to the console and type the following, where * means \"any file\" and can be replaced with a specific name:",
    "p11con": "git add *",
    "p12p": "This adds any changed files in the folder to the files ready to be committed.",
    "p13p": "Once the files have been added, you can commit them, which adds them to the repository history, where * means \"any file\" and can be replaced with a specific name:",
    "p14con": "git commit * -m \"message of your choice; it should relate to changes; the first commit is usually called Initial commit\"",
    "p15p": "This adds the current version of the files to the history along with the message.",
    "p16p": "Now change the contents of the .txt file.",
    "p17p": "Add the files again and commit.",
    "p18p": "You now have two commits in the repository history.",
    "p19p": "You can see all commits in a repository using the command:",
    "p1p": "Git is a version control tool - in fact, it's the most widely used.",
    "p20con": "git log",
    "p21p": "This shows you each commit, with its commit id (upper string), the name of the committer, the date and the message.",
    "p22p": "Using the id, we can go back to an older commit:",
    "p23con": "git revert --no-commit <id>HEAD\ngit commit",
    "p24p": "Execute this command using the id of the first commit. Technically, git creates a new commit with the contents of the first commit. Imagine you have working code in the file. Change the contents of the file again. Now imagine that the code no longer works (a fairly common situation). Ctrl+z doesn't work either. You have to go back to the state of the last commit of the file, which is the state right after the first commit. This is done by doing a reset (\"restart\") to HEAD (\"head\") - the last commit:",
    "p25con": "git reset --hard HEAD",
    "p26p": "Another thing git can do is create branches. So far, we've been working in git's main branch - master or main. When we create a new git branch, it gets a perfect copy of the branch we created it from. We can then make changes in the new branch without them appearing in any other branch. When we're done, we can merge the two branches. When two branches are merged, the changes from one are added to the other. The problem is that the following situation is possible:",
    "p27p": "In the main branch there is a file with the content \"Version 1\".",
    "p28p": "A new branch is created from the main branch.",
    "p29p": "In the new branch, the contents of the file are changed to \"Version 2.1\".",
    "p2p": "Git allows you to save a file in a specific state in time, then modify, save, or even delete it, and finally restore it from that saved version. This happens via a console program (which also has a GUI). It's called a version control tool because it allows programmers to save versions of a program and restore older ones. It also allows all history and all code to be saved on a remote server so that any programmer can access all code from anywhere in the world.",
    "p30p": "During this time, another developer changes the contents of the file in the main branch to \"Version 3\".",
    "p31p": "Someone is trying to merge the second branch into the main branch, but we have \"Version 3\" in one branch and \"Version 2.1\" in the other. git doesn't know which version is \"more correct\" and a merge conflict occurs. Look up how merge conflicts are resolved.",
    "p32p": "Branches are very widely used. Most of the time, there are two branches - one for development (usually called dev), and one main. The main one is the official version of the program, while changes are made to the other brach. It is also usual to create a new branch for each new feature or issue, in which the feature is added or the issue is resolved and then the new branch is merged with dev.",
    "p33p": "A branch is created this way:",
    "p34con": "git checkout -b <branch name>",
    "p35p": "This creates a new branch and sends you into it.",
    "p36p": "Change the contents of the file again and perform a commit.",
    "p37con": "git add *\ngit commit * -m \"Message\"",
    "p38p": "Use the following command to return to the main branch:",
    "p39con": "git checkout master",
    "p3p": "For the purpose of this tutorial, install git from the official site - https://git-scm.com/download It would also be nice to make an account on one of the main platforms - GitHub, GitLab or BitBucket (personally I prefer GitHub).",
    "p40p": "Let's merge the newly created branch with master.",
    "p41e": "When you merge 2 branches, always make sure you are in the one you want to get the changes.",
    "p42p": "Perform the following command:",
    "p43con": "git merge <branch name>",
    "p44p": "There are also git push and git pull commands. These commands allow you to push and pull code from a remote repository that you have access to.",
    "p45p": "Use your GitHub, GitLab or Bitbucket account. Create a new repository there and use the instructions to publish your code.",
    "p46p": "I leave it to you to figure out how git pull and git push work. Your task is to upload your repository to GitHub/GitLab/BitBucket using git commands, delete it from your local machine, and restore it from GitHub/GitLab/BitBucket using git commands.",
    "p47p": "Normally, programs are distributed in compiled form which means the program is largely uneditable and seeing the original code is almost impossible.",
    "p48p": "On the other hand, there are also open source programs. Their code is publicly available in public repositories, whether on one of the above platforms or on a purpose-built one. Anyone has access to the code and can read it. Anyone can download the code, make changes to it and suggest them, then a maintainer can approve and merge them into the main project. Someone can even make their own version of the project, called a fork.",
    "p49p": "Many free programs work that way - the Linux and Android operating systems (which is a fork of Linux), Blender, Gimp, Audacity and many others",
    "p4p": "After installation, open the newly installed Git Bash (designed to emulate the Linux terminal bash). It has the normal commands like cd and touch (for creating files). Use cd to navigate to an empty folder to experiment in.",
    "p50p": "Open source code is protected by certain licences. Some are more closed - they declare that anything that uses code licensed with them must also be open source or allow the user to edit the licensed code. Such licenses are GNU GPL and others. They license most programs so that someone cannot steal the code and start selling it as a closed source program. They guarantee that open source code will remain open.",
    "p51p": "Others are more open - these licenses in short say that anyone can do whatever they want with the code licensed with them, without including the license or mentioning in any way how or where they got the code. Such licenses are MIT and Apache. If you ever use a public programming library, it will most likely be licensed that way. Just in case, always check the license of public code you use.",
    "p52p": "You're going to encounter git and open source many more times, so even if you don't understand something in this tutorial, you'll have time.",
    "p5p": "The basis of git is a repository. A repository contains the entire history of the files in it.",
    "p6p": "It is created like that:",
    "p7con": "git init",
    "p8p": "This creates a new repository in the folder. You'll notice it by the hidden .git folder. If you don't see it in file explorer, type the tree command and you should at least see it in the console.",
    "p9p": "Then create a .txt file. Write something in it.",
    "text": "Where you will learn how to travel back in time",
    "title": "Lesson 39"
  },
  "l4": {
    "p10p": "First, note that the root folder is written with \":\" before the separator/delimiter. That is, we have \"C:\".",
    "p11p": "This is Windows, so the separator is \"\\\". With a \"/\" separator, we would have the same effect:",
    "p12pre": "C:/Users/John/Documents/nominations.docx",
    "p13p": "However, this case is more practical for programming purposes. Above, \"\\n\" in \"\\nominacii.docx\" would be interpreted as a newline by most languages, leading to errors. For the remainder of this \"course\", I will mainly use \"/\" for this reason.",
    "p14p": "In addition, we can place a separator after the end of the path, but it is not recommended:",
    "p15pre": "C:/Users/John/Documents/nominations.docx/",
    "p16a1": "It is ugly",
    "p16a2": "It doesn't work in Windows",
    "p16a3": "Because it can be interpreted as different control symbols",
    "p16tq": "Why is it not advisable to use \"\\\" as a separator in programming?",
    "p17p": "However, let's imagine that our user wants to start from a folder named \"Projects\", which is located in \"Documents\" and get to \"nominations.docx\". For this we will use a relative path.",
    "p18p": "First, let's see the absolute path of the Projects folder:",
    "p19pre": "C:/Users/John/Documents/Projects",
    "p1p": "Information in a computer is divided into files - pieces of information. Each file has a name and a size - usually measured in bytes (1 byte = 8 bits). Files are grouped into folders, and within each folder there may be files and other folders. This forms a tree-like pattern of organization - each folder is a new branch that contains files and from which more branches - folders - start.",
    "p20p": "Then, the absolute path of the file nominations.docx:",
    "p21pre": "C:/Users/John/Documents/nominations.docx",
    "p22p": "Notice that both are in the \"Documents\" folder. Only one is a folder and the other one is a file.",
    "p23p": "In relative paths we have a current (or working) folder. The path starts there. There are several special symbols for navigation. \"./\" means the working folder. That is, if the working folder is \"Projects\", and there is a file \"project1.txt\" in it, we can reach that file via the path:",
    "p24pre": "./project1.txt",
    "p25p": "That is, \"./\" just means \"the folder I'm in\".",
    "p26p": "But if we want to reach an item in a previous folder from the working folder, we use \"../\". This means \"the previous folder from the working folder\". Compared to \"Projects\", this is the \"Documents\" folder. So, if we want to reach \"nominations.docx\" from Projects we use the path:",
    "p27pre": "../nominations.docx",
    "p28p": "That way we can go back more folders. For example, if there is a file named \"hello.txt\" in \"John\", we can access it from the working folder \"Projects\" like this:",
    "p29pre": "../../hello.txt",
    "p2a1": "Only folders",
    "p2a2": "Only files",
    "p2a3": "Hard drives",
    "p2a4": "Folders and files",
    "p2tq": "In any folder there may be:",
    "p30p": "As you noticed, I didn't write a folder or user name in a script other than Latin letters, such as Cyrillic. This is because some systems only support ASCII and Cyrillic causes problems with them.",
    "p31a1": "working directory",
    "p31a2": "previous folder",
    "p31a3": "next directory",
    "p31a4": "file",
    "p31tq": "In a relative path \"./\" is:",
    "p32p": "As you have probably noticed, the title of this lesson says that extensions are a lie, but we haven't talked about that. For that matter, I haven't written the word \"extension\" once since the beginning of the lesson. File extensions are the last part of a file, separated by a \".\" from the rest. All the extensions so far have been written as a part of the filenames:",
    "p33p": "nominations.docx – \".docx\" is the extension",
    "p34p": "project1.txt, hello.txt – \".txt\" is the extension",
    "p35p": "But the reality is that extensions are a lie. A suggestion, to be precise.",
    "p36p": "First, each file is just text or binary format (zeros and ones, no text meaning). Nothing else. And extensions are а part of the name.",
    "p37p": "Еxtensions are only a suggestion. When the operating system sees a \".docx\" file, it knows that it needs to open it with Word. When it sees an \".mp3\" file, it knows it's music. But that doesn't stop us from opening the file with another application. We can right-click on the file, click \"Open with\", click \"More apps.\", find Notepad, and open the file with it and all we will see is text. The file may be binary - when we open it, we will see strange characters - no encoding that can be read.",
    "p38p": "The file may not even have an extension. The popular platform Heroku uses the file \"Procfile\" - it reads it and opens it as text, but it has no extension.",
    "p39p": "One of the most common problems programmers have is storing information along with what it is intended for. For example, you want to save the language of an application and then read it from a file. You can just make a file \"lang.txt\" and save it there. But it's impractical. After that you may have a setting like mode - dark or light. And would you create a file for it? That's what the key-value formats exist for. Let's look at them:",
    "p3p": "In most operating systems (Windows, Linux, macOS), the amin folder is called \"C\", often also called root because it is the root of the file tree. The path of a file or folder is the sequence of folders that a user must traverse to get to the file or folder. Paths have 2 types: absolute and relative. An absolute path always starts at the root folder and ends at a file or folder. A relative path can start from any folder. That is, it just refers to other folders and files.",
    "p40h": "XML",
    "p41p": "XML is one of the oldest formats. It is based on tags. A tag can be an opening or a closing one. An opening tag looks like this:",
    "p42pre": "<name of the tag>",
    "p43p": "A closing tag looks like this:",
    "p44pre": "</ name of the tag>",
    "p45p": "There can also be a single tag - that is, <single tag />. These tags are used for information, such as a new line. Tags allow information to be saved. For example (it is advisable not to write tags in anything other than Latin):",
    "p46pre": "\n<lang> Bulgarian </lang>\n<mode> light </mode>",
    "p47p": "Another unique property of xml is that there can be other tags between the tags (\"settings\"):",
    "p48pre": "\n<settings>\n\t<lang> Bulgarian </lang>\n\t<mode> Light </mode>\n</settings>",
    "p49p": "Notice how with each successive level of tags we put more space to the left.",
    "p4a1": "From the root of the file tree",
    "p4a2": "From any folder",
    "p4a3": "From any file",
    "p4a4": "From the file it goes to",
    "p4tq": "Where does an absolute path begin?",
    "p50p": "Using this format, the programmer can then ask for the lang value in settings and get \"Bulgarian\".",
    "p51p": "XML is widely used - \".docx\" are archives, but when unzipped, they are mainly .xml files. Also, the whole internet depends on xml - its sub-language html is the basic structure of any website. It can also carry information in tags - for example, that is how you add an image to a website:",
    "p52pre": "<img src=\"path to image\"></img>",
    "p53p": "Here \"src\" gives the path to the image (relative). The browser then requests the value of \"src\" in \"img\" and gets the path to load the picture from",
    "p54fq": "Write an opening and closing tag \"version\", between which is written 17.2",
    "p55h": "JSON",
    "p56p": "However, XML is not convenient for transferring large amounts of information. Each tag name is written twice (for opening and closing), which is a lot of bytes of information. This is why JSON (Javascript object notation) is used. First, this format is very easy to read by Javascript, the dynamic language of any website, as the name suggests. Let's imagine you're making an account in some social network. You input your name, e-mail, age and password. Then you click \"register.\" A message is sent to the server that looks something like this:",
    "p57pre": "\n{\n\t\"name\": \"John\",\n\t\"email\": \"john@email.email\",\n\t\"password\": \"goodpassword\",\n\t\"age\": 18\n}",
    "p58p": "This is JSON. It starts with \"{\" and ends with \"}\". There is always a key on the left - for example \"name\". Then there is a \":\" character, which means the end of a key. Each key is enclosed in quotes. After the \":\" is the value. It can be one of several types. The first is text surrounded by quotes. It can also be a simple number, like 18. It can be a list:",
    "p59pre": "\n{\n\t\"list\" : [\"eggs\", \"bread\", \"butter\"]\n}",
    "p5p": "When paths are written, a delimiter/separator is written between each folder or file. On Linux and macOS, this is usually \"/\". In Windows, the separator is \"\\\". However, this is not practical in programming because of the many characters reserved with \"\\\". For example, in most files, \"\\n\" means newline and is not displayed to the user, while \"\\t\" means tab.",
    "p60p": "Or even another JSON object:",
    "p61pre": "\n{\n\t\"name\": \"John\",\n\t\"email\": \"john@email.email\",\n\t\"password\": \"goodpassword\",\n\t\"age\": 18,\n\t\"additional\": {\n\t\t\"list\" : [\"eggs\", \"bread\", \"butter\"]\n\t}\n}",
    "p62p": "After the end of a value there is a comma, a next key and so on.",
    "p63p": "JSON is the most common format for carrying information on the Internet.",
    "p63w": "There is no comma after the last value.",
    "p64a1": "list",
    "p64a2": "text",
    "p64a3": "number",
    "p64a4": "file",
    "p64tq": "The value of a JSON key cannot be:",
    "p65rq": "Find information about the TOML and YAML file formats",
    "p6a1": "newline",
    "p6a2": "space",
    "p6a3": "tab",
    "p6a4": "capital letter",
    "p6tq": "What does the \"\\n\" character mean?",
    "p7p": "Let's look at an example. We are in Windows. We are logged into a user named \"John\". This user has a file named \"nominations.docx\" in his \"Documents\" folder. This folder is located in his users folder (\"Users\"), which is in his root folder (\"C\").",
    "p8p": "This is what the absolute path to this file would look like:",
    "p9pre": "C:\\Users\\Gosho\\Documents\\nominations.docx",
    "text": "Where you will learn that extensions are a lie",
    "title": "Lesson 4"
  },
  "l40": {
    "p10h": "Be general",
    "p11p": "If you use a library and have a problem, you usually look for that specific error from the library. Unless the library in question is known, there is a very low chance of finding something. Search more generally. Instead of looking for that library error, look for what might be causing it. It could be that this scary error is the result of you writing 0 as a value, which some library function didn't like.",
    "p12h": "Different sources for different things",
    "p13p": "You have to look for different sources for different things.",
    "p14p": "In general, text is better than a video. At the beginning, however, video is often more understandable.",
    "p15p": "For example, if you want to learn a programming language, go to the documentation or a video. If you feel like reading, you can pick up a book, but be careful that it's not too outdated - languages are constantly evolving.",
    "p16p": "If you want to brush up on language, I recommend text formats - look for the official documentation first. If it's not enough, go to the other sites that are top in the results. I can also recommend the site https://learnxinyminutes.com/ (which I'm not affiliated with) if you want to brush up on syntax or some basic stuff.",
    "p17p": "If you have a problem, your best bet is the StackOverflow site - usually the top result. Just be careful when taking code and read decisions from the answers, not the question text. Look at all the questions that match your search.",
    "p18p": "If there's no answer there, try other forums in the results like Reddit. Although rare, sometimes there are answers to extremely specific problems.",
    "p19p": "Only if you don't find anything you should create a question in one of these places and hope for an answer.",
    "p1p": "Searching is a fundamental part of programming. There are so many libraries, languages, frameworks, etc., that one person can't know them all, and there aren't books and resources for them all. The only person who can teach you is you.",
    "p20p": "If you have a problem with a library, your best bet is to find its public repository and look at the issues noted there - there's a very good chance you'll find your own.",
    "p21h": "Watch out for bad results",
    "p22p": "Sometimes there are bad results on the Internet. Red flags are bad formatting, bad method and variable names, or mistakes in using naming conventions (for example, namesspelledlikethat instead of names written in the recommended language format). Watch out also for very outdated sites or results.",
    "p23p": "Never copy-paste without understanding what and don't copy-paste more than a few lines. If necessary, convert names and parentheses to blend in with the rest of the code. Everyone happens to need some very complicated calculation for colors or something similar that they can't write themselves. That doesn't mean you have to \"throw in\" 30 lines of code from an unknown place of unknown quality that you don't understand. You just might manage to add a security hole.",
    "p24p": "Also, don't pay attention to sites that simply steal replies from famous forums via bots and put them on their own site. They're easy to spot, but they can confuse you at first.",
    "p2p": "Furthermore, programmers are not expected to know everything. I would say that I can program in several different languages, but I find myself looking for the simplest things, like the right syntax to create an enum or a switch.",
    "p3p": "In this lesson, I'll give you some search tips that I've found over time.",
    "p4h": "Always search in English",
    "p5p": "If necessary, use an online translator. It doesn't matter. In most languages, your results are extremely limited. English is the language of programming.",
    "p6h": "Don't explain too much",
    "p7p": "Most search engines rely on keywords. Don't write long complicated questions. For example:",
    "p8p": "\"how to find square root in java\" seems like a good search, except it doesn't make sense to write it out. It's long and likely to show some confusing results because the search engine will have lots of keywords. It's faster for you to write the following:",
    "p9p": "\"square root java\" is extremely simplistic. It contains only three important words and nothing more. This is what you are interested in - square root in Java. Unnecessary particles and other parts of speech have been removed so you don't have to type them or burden the search engine. The results are more precise and direct.",
    "text": "Where you will learn how to use the Internet",
    "title": "Lesson 40"
  },
  "l41": {
    "p10p": "This position encompasses the above two plus a good knowledge of databases. Quite often there are requirements for a position like this, and it usually looks as if the employer is looking for an entire programming department, judging by the length of the list of required technologies. Quite often even knowledge in server architecture is required - Docker, Kubernetes, the famous platforms. People meeting all of these requirements are usually not experts in any of them. However, their overall knowledge can prove very useful in some cases.",
    "p11h": "Database administrator",
    "p12p": "These people deal with the creation and administration of databases. They are familiar with different types of databases, such as relational, document store, and others. They are usually very familiar with the SQL language. They are concerned with designing databases that conform to all known principles so that they can accommodate maximum amounts of information with maximum performance. They ensure 100% availability and speed of databases.",
    "p13h": "Server architect",
    "p14p": "These people deal with servers and the Internet in general. They are familiar with communication protocols and basic Internet concepts, such as the Domain Name System (DNS). They are expected to be very familiar with the operating systems used in servers, such as Linux and Windows Server, and be familiar with server software such as Nginx. Nowadays, knowledge of working with cloud platforms such as AWS (Amazon Web Services), Microsoft Azure and Google Cloud is also almost always required. These people also deal with issues pertaining to server distribution and information caching. They are knowledgeable in basic server security measures and protection from various attacks. They have to achieve 100% availability of the servers with maximum productivity. This is a very broad but very interesting area of the computer world.",
    "p15h": "Mobile developer",
    "p16p": "These people are in the business of creating apps for mobile devices, usually Android or iOS. They use the incredibly wide ecosystem of libraries and tools. If you've used an app on a phone, one of these people created it. A specific characteristic is specialization - usually a developer is mainly dealing with Android technologies (Java, Kotlin, Android Apis) or iOS ones (Objective-C (deprecated), Swift, iOS Apis). With the advent of libraries and frameworks like Flutter and React Native, some of these developers can write code that runs on both of the platforms mentioned. I recommend everyone to try to create a mobile app at least once.",
    "p17h": "Desktop development",
    "p18p": "These people are involved in creating applications for desktop devices such as desktops and laptops. These devices typically use the Windows, MacOS and Linux operating systems. The languages used are Java, C#, C++. Creating such applications has always been difficult and complex. In recent years, technologies like Electron have taken over the market. They allow a website to be installed with a browser engine and run as a desktop application. Although they are a bit heavier on the computer than normal applications, they are extremely easier to create and more versatile. In fact, my original idea was to distribute this site as such an application.",
    "p19h": "Game development",
    "p1p": "How far we have come! You are almost at the end of this \"course\". This is the lesson where I will explain the different areas of programming and the languages and technologies used in them.",
    "p20p": "This is one of the most commonly requested, but also most complex areas of programming. Games are difficult to create, requiring incredible amounts of math (and sometimes physics), labor, and time. However, people who do it very often find enjoyment in it. Get ready to use a game engine like Unity or Unreal Engine and languages like C# (Unity), C++ (Unreal Engine) and C. My only advice is not to start with too big a game. You may have a huge idea, but start with something smaller because development takes a long time. This field has another side in game modding. It's mainly a hobby and doesn't have much monetary potential, but it can still be fun. For it you may need languages like Java, Lua, C++ and others.",
    "p21h": "System programming",
    "p22p": "This is the most important area for computers. It is the origin of operating systems and almost all software of every other computing device. Whether you start your computer, your car, or your toaster, it's probably because of the products of this sphere. Get ready for a world of Assembly, C, C++, maybe Rust in the future, serious optimizations, and inhuman limitations in processing power and memory. However, some people still like it. You could start with some of the Arduino boards (I'm not tied to them), which give you C++ with an easy to use library.",
    "p23h": "Data Science и Machine learning",
    "p24p": "As the names suggest, these disciplines are more mathematical than programmatic. Again, large amounts of mathematics. They deal with information and its applications as well as the possibilities in teaching computers. In the programming part of them, you'll probably use C libraries with interfaces in Python or R. The further you climb up their levels, the higher the chance you'll have to write your own code in C, presenting your own algorithms. They promise a difficult but interesting path.",
    "p25p": "In general, no matter what you do, here are some tips:",
    "p26p": "Never create your own authentication system (profiles) unless you have the necessary knowledge (you probably don't) or are doing it for educational purposes.",
    "p27p": "Never save passwords without hashing them. Encryption produces a string that can be decrypted. But, once you hash a password, it can never be returned to its original state from the hash. The only way to check if a user has entered a correct password is by comparing the hash of the entered password with the hash of the password. Be sure to check the hashing algorithm - don't use algorithms that are too old or already cracked. And use salt so that you can protect yourself from rainbow table attacks (when someone takes a dictionary and calculates the hash of each password). The salt is added to the beginning of the password before hashing and is always random (e.g. $hau53). The salt is then written before the hash. Thus, an attacker must generate each word of the dictionary with the given salt for each password, making cracking nearly impossible or impractical. Don't forget that very few people have words for passwords.",
    "p28p": "Never trust the user and always assume they have bad intentions. The server is the only code you can rely on because it runs on computers you control. A user in a game can tell you they traveled 6km in 1 second or hit someone through a wall, but the server should trust it. The server should always limit everything to realistic bounds, so that it doesn't appear that someone has taken it down by uploading a 2TB file. And if someone tells you that their age is actually \"a 12 meter bear with pink wings\", you shouldn't trust them either. Better be paranoid than sorry. And even the best protected program can be modified by a sufficiently stubborn person. Any code that runs on the user's computer is insecure, whether Javascript in the browser or machine code. The only protection is through the server.",
    "p29p": "Security through secrecy is not security.",
    "p2h": "Frontend",
    "p30p": "It's important to understand this - you'll usually be working on code that users don't have access to. Code they can't read. However, if only knowing about the code is enough for someone to get through security, then security never existed. Accept that every line of code you write can be read by someone in the future. The only real security comes from secure code. Not from someone not knowing that the code is insecure.",
    "p31p": "Don't bother creating your own timing or localization library (localization is the translation of a program into multiple languages). Time is one of the very complex topics, countries are constantly moving from one time zone to another and everything changes. Just save the time in Unix time (seconds or milliseconds of Unix epoch, where 0 is January 1, 1970 - so when something doesn't show the time correctly, that's the first date it chooses) and trust a widely used library. Localization is a very tricky process - for example, in some languages you have \"1 table\" and \"2 table\". In others you have \"1 table\" and \"2 tables\". And there are cases where you have a special word for 2 things and another for more than two things. There are languages that are written from right to left. Just don't bother with all that and trust someone else. It's the translators job to just write the translations - not to call you every 15 minutes for something special in their language that you need to add. Also, if you plan to translate an app, look into the localization libraries needed before you start writing the code, because they are usually difficult to add later in development.",
    "p32p": "Do not copy code from the Internet without thinking. Check it for errors and the like. If it's more than 1 line, like a function, try to write it out by hand. Even if it's 1 line, if you don't understand it, write it out by hand. The programmer can't know everything, that's why there's the Internet, but you shouldn't trust it 100%.",
    "p33p": "When learning something, always start small. I understand that you probably want to make the next big social media, or an online game for millions of people, or artificial intelligence befitting the Terminator, but you probably won't be able to the first time. To figure out how to make a 300 page site, you have to make a 3 page one.",
    "p34p": "Code is written for other people, not for the computer. Either way, it will only see a mess of zeros and ones. Your main task is to create readable code. Once you've created readable code for the human, you can optimize it for the computer.",
    "p35p": "The essence of programming lies in considering every possibility and solving logical problems. Every time you do something, you have to think about what might happen because of it. For example, we have a game with a randomly generated world where there are structures. Someone adds an option to generate a world without structures. Years later, an object has to be added that shows where the nearest structure is. It's added and an update is released, but suddenly there are reports of weird game crashes. It turns out that whoever added the new item didn't think about the possibility of no structures in the world, which led to problems. Such errors happen frequently and the only way to stop them is by considering and covering every possibility. You need as much information about a problem as possible before you can solve it, but it is best to have no problem.",
    "p36p": "I hope this lesson has helped you too. Remember - the best way to find your favourite is to try everything.",
    "p3p": "These developers are concerned with how a site looks and behaves. They give it structure through HTML (XML version), view through CSS and dynamism through JS (JavaScript). They deal with what happens on the user's browser - you won't see them doing authentication systems or anything else. They don't deal with servers, but they're the ones that make a site to look at.",
    "p4p": "Languages used are HTML, CSS, JavaScript. Technologies used are SCSS, jQuery, React, Angular, Vue, etc. I recommend you make a site with the above languages before you get into the technologies.",
    "p5h": "Backend",
    "p6p": "These are the people who deal with what happens on the server. They write the systems for logging in and out of profiles, they deal with saving information. Anything that you can't trust the user for happens with them. If you're headed that way, a couple of tips:",
    "p7p": "Don't find the hot water - don't create account authentication systems and the like. Always hash passwords with one of the well-tested algorithms. If you have to write SQL (the relational database language), never use string concatenation because you create a huge security hole.",
    "p8p": "This area of programming is also where most technologies and languages are used. Some of them are Java (Spring), C# (.Net/.Net Core), Node.js, Go, Ruby (Ruby on Rails), PHP, Python and many others. The good thing is that once you learn one of these technologies, you know all the others. They work in a similar way, meaning you just have to look at the special things of the new language and framework.",
    "p9h": "Full Stack",
    "text": "Where you will learn your options",
    "title": "Lesson 41"
  },
  "l42": {
    "p1p": "I can't believe this moment has come. This is the last lesson.",
    "p2p": "There were many lessons, but I had fun writing (almost) every one of them.",
    "p3p": "In the last 42 lessons I gave you all the general programming knowledge I can give you. No catches, the same way I got it. I hope you can do something similar.",
    "p4p": "I hope you understood everything or at least something. I hope you turn out to be an excellent programmer, even if you don't do this for a living. After all, it works out very well as a hobby too.",
    "p5p": "I can give you starting knowledge, but I can't explain everything. That is your job. Programming is one of those fields that is constantly evolving and new technology is always coming. I recommend you keep up, or you'll get rusty :)",
    "p6p": "From the moment you started reading these lessons, you took your knowledge into your own hands. I believe that since you've gotten this far, you can achieve more. Your journey is just starting.",
    "p7p": "One last time for now,",
    "p8p": "Good luck!",
    "text": "Where I will send you off",
    "title": "Lesson 42"
  },
  "l5": {
    "p10con": "<<prefix>>C:/Users/User> cd ../",
    "p11p": "We get:",
    "p12con": "<<prefix>>C:/Users>",
    "p13p": "Because we've gone back a folder. To go back to \"User\" we can type:",
    "p14con": "<<prefix>>C:/Users> cd User",
    "p15p": "Which will have a result:",
    "p16con": "<<prefix>>C:/Users/User>",
    "p17p": "If we want to navigate to a folder whose name has a blank space, we enclose the name in quotes:",
    "p18con": "<<prefix>>C:/Users/User> cd \"Folder with an empty space\"",
    "p19p": "If we again have the absolute path \"C:/Users/John/Documents/nominations.docx\", and we have a console in \"C:/Users/\", we can directly get to \"Documents\" in the following way:",
    "p1p": "In this tutorial we will go back to the old days when there were no graphical interfaces. When everyone who worked with a computer navigated by text alone in a dark window - we'll look at the console.",
    "p20con": "<<prefix>>C:/Users/> cd ‘’John/Documents/",
    "p21p": "We get:",
    "p22con": "<<prefix>>C:/Users/John/Documents/>",
    "p23a1": "We will remain in the current folder",
    "p23a2": "We will go to \"John\"",
    "p23a3": "We will go to \"Users\"",
    "p23a4": "We will go to \"C:/\"",
    "p23tq": "If we are in the working folder \"C:/Users/Gosho/Documents/\" and the command \"cd ./\" is executed, we will go to:",
    "p24p": "You can also launch applications from the console. If you have a file named \"program.exe\" (at least on Windows) in your working folder and type \"program.exe\" into the console, the program will run.",
    "p25con": "<<prefix>>C:/Users/John/> program.exe",
    "p26p": "Many programs also require arguments. Arguments are written in a \"-key value\" format. For example.",
    "p27con": "<<prefix>>C:/Users/John/> program.exe -mode light",
    "p28a1": "-mode",
    "p28a2": "*mode",
    "p28a3": "mode",
    "p28a4": "/mode",
    "p28p": "The program will receive this information. In the lessons ahead you will learn to read and write in the console using programs and to take and use arguments.",
    "p28tq": "What is a valid key for an argument",
    "p29rq": "Look up how to create, delete, copy and move files in your console.",
    "p2p": "The console is different according to the operating system. On Windows it is CMD or PowerShell. On Linux it is probably Bash. On macOS it is Terminal (\"terminal\"). The latter two are based on the Unix console, i.e. they have similar commands. CMD and PowerShell differ slightly. I will mainly cover CMD and Unix consoles here.",
    "p3p": "When you open a console, it will launch with a folder active in your user. You'll see something similar:",
    "p4con": "<<prefix>>C:/Users/User>",
    "p5p": "After \">\" you will have a field to write in. You can type a command and press \"Enter\" (\"new line\") to execute it. The first command we will look at is \"tree\". This command displays all folders and files as a tree. It is sometimes useful, especially if you are working in an environment without a GUI. It also works very well for displaying \"skills\" and bragging.",
    "p6a1": "Image of a tree",
    "p6a2": "The structure of files",
    "p6a3": "The structure of folders",
    "p6a4": "The structure of the folders and files",
    "p6tq": "The tree command shows:",
    "p7p": "Furthermore, in this case \"C:/Users/User>\" is our working folder. We can change it. This is done using the \"cd\" command from \"change directory\" (directory is a synonym for folder). The console works with relative addresses. That means, if we type:",
    "p8con": "<<prefix>>C:/Users/User> cd ./",
    "p9p": "We will remain in the same folder. If we write:",
    "text": "Where you will learn how computers were used before graphics",
    "title": "Lesson 5"
  },
  "l6": {
    "p10a1": "Different actions",
    "p10a2": "Different result",
    "p10a3": "The same result",
    "p10a4": "Different algorithms",
    "p10tq": "Two executions of an algorithm are expected to have:",
    "p11p": "It is similar in programming. Every program operates with multiple algorithms. You will create many. Some you will need to read because they were invented by people smarter than you and me. Let's look at one:",
    "p12p": "Imagine there are 10 numbers in a row in front of you. Actually, you don't need to imagine them. Here they are:",
    "p13p": "1, 5, 78, 6, 9, 127, 6758, 89, 9680, 9679",
    "p14p": "Find the biggest number",
    "p15p": "\"9680!\" of course. But how did you find it? \"I saw it\" is not a valid answer. Computers don't see. Let's create an algorithm to find the largest number:",
    "p16p": "You probably picked the number that looked the biggest to you first. However, it doesn't \"look\" like that to the computer, so for the purpose of this algorithm we'll pick the first number. \"1\" in this case. Then we'll look at the next number. It is 5, which is greater than 1. So our number is now 5. Then we have 78. It's greater than 5, so our number is already 78. Then we have 6. 6 is less than 78. So we skip it and 78 remains our number. This continues until the end of the number sequence. Finally, our number is guaranteed to be the largest - 9680.",
    "p17a1": "We put a minus sign in front of the final result",
    "p17a2": "Instead of checking for a bigger number, we check for a smaller",
    "p17a3": "We reverse the list before that",
    "p17a4": "Subtract the sum of the numbers in the row from the result",
    "p17tq": "How to modify the above algorithm to find the smallest number in the series?",
    "p18p": "This is one of many algorithms you'll come across, but it's certainly one of the simplest and most commonly used.",
    "p19t": "Algorithms are not meant to be memorised. There are too many and you possibly can't remember them all. The important thing is to develop your thinking and to be able to see through a task so you can write your own algorithms.",
    "p1p": "Ahhh - an algorithm! One of the more misunderstood words in general. And now we're going to talk about it.",
    "p2p": "Let's first clarify what an algorithm is. An algorithm is a sequence of actions to achieve a result.",
    "p3p": "That's it. An algorithm is, for example, a morning routine:",
    "p4p": "Get up. Brush your teeth. Have breakfast. The result is that you are ready for the day.",
    "p5p": "There can be several different algorithms to achieve the same result:",
    "p6p": "Get up. Brush your teeth. Have a shower. Have breakfast. You are ready again.",
    "p7p": "Get up. Look at the clock. You are 30 minutes late. Brush your teeth while getting dressed. You are ready again.",
    "p8p": "The result is also general. For example, if I sort one pile of objects one way and another one - the same way, the piles are not the same. But the result of the sorting algorithm is the same - the items are sorted. Similarly, the lottery algorithm always has the same result - there are always 6 numbers drawn, never mind that they are different each time. Each action is broken down to its smallest parts to be part of an algorithm. If someone asks you, \"What is your morning routine\", and you reply \"I just get ready\", you won't help much, however, if you respond with some of the above examples, you would give a complete answer. After that, you may be asked \"How do you brush your teeth?\". An answer like the previous should follow. In a sense, programming comes down to the ability to break down problems to their smallest part.",
    "p9p": "Running the same algorithm twice and expecting a different result is bad, and if it works, then there's a bug in the algorithm - the expected result of the laundry algorithm is \"clean clothes\", not \"flooded room\".",
    "text": "Where you will learn what is an algorithm",
    "title": "Lesson 6"
  },
  "l7": {
    "p10p": "To solve the previous problems, Stack memory comes to the rescue. It's not big, but it's structured and fast. It is also the common between the stacks of ordinary biscuits and computers. Let me explain:",
    "p11p": "The stack is very simple. It is like a box where the top is open:",
    "p12alt": "Rectangle with an open upper part",
    "p13p": "Only other boxes that are on top of each other can be put in this box:",
    "p14alt": "The box from above, this time with three other rectangles inside, placed on top of each other",
    "p15p": "As you notice, you can add to the box only from abole. And only the last thing added can be taken out. Like with packets of plain biscuits. That's the stack. But how does it solve the problems with the heap?",
    "p16p": "Each time the program enters a new block of code, another box is added to the stack. We can save to the block box in the stack. However, if we need the heap because of its size, we send a message similar to the above to the CPU. It borrows the memory and replies us with an address. We can store that address in our box on the stack. If we need to, we can use that address to return to the borrowed memory, change it, or tell it to be marked as free for borrowing.",
    "p17p": "There is one problem though. When our block of code stops, our box in the stack disappears. The saved address disappears with it. That is, we can no longer access the memory occupied by the heap - it will continue to exist until the program is closed. This is called a memory leak. Memory leaks lead to huge security and resource burden problems for programs. In the next lesson, we'll see how different programming languages deal with this.",
    "p18a1": "Spilling water on RAM",
    "p18a2": "Spilling water on ROM",
    "p18a3": "Failure to mark memory on the stack as empty",
    "p18a4": "Failure to mark memory on the heap as empty",
    "p18tq": "Memory leaks happen because of:",
    "p19p": "Maybe you have noticed that there is a test after this lesson. Good luck!",
    "p1p": "This is one of the trickier lessons, so watch out. We will deal with memory.",
    "p2p": "First, let me explain that a computer has 2 types of memory - RAM and ROM. ROM is in hard drives, SSDs, etc. This is permanent memory - it continues to exist even if there is no current running to it. Files and some other things are stored on it. Imagine if every time you rebooted your computer, you had to reinstall your operating system... and all your files were lost... and you had to reinstall every application... Chaos, right? This is the problem that ROM solves. It's usually big - there has to be room for everything. Where it usually fails is in speed - ROM isn't know as fast.",
    "p3p": "The second type of memory is RAM. It is usually much faster and much less than ROM. However, it depends on the power source - the moment current is no longer present, RAM empties completely. Applications load on it - for example, when you open the calculator and type a number into it, it is stored in RAM. That's how you see it as you type. The text you write in Word is saved in ROM, but you see it because it was loaded into RAM. RAM is the memory that applications have direct access to. That's why everything closes when you restart your computer. Saving to ROM is a little more complicated.",
    "p4a1": "is energy dependent",
    "p4a2": "runs only on green energy",
    "p4a3": "saves permanently",
    "p4a4": "is the type of hard drives",
    "p4tq": "Ram is memory, which:",
    "p5p": "Let's move on to the two parts that RAM is divided into for each program.",
    "p6h": "Heap",
    "p7p": "Heap is the one type of memory that every program can access. As the name implies, it is a heap of information - literally. Imagine a pile of toys stacked on top of each other. Another important thing about the heap is that it has a random ordering. It's also quite large. That is, if the CPU receives a command like \"save my 4 bytes of the heap\", it will start going through the heap from the beginning. At some point it will find an empty space. It will then count the bits to the end of the empty space, and if there is enough, it will allocate the memory as occupied - 4 bytes, as the message says. Once occupied, the memory sits like this until one of two events - either it is marked as free at a later stage, or at the end of program execution. That's nice, but once we borrow memory on the heap, how do we get to it? After all, it's random and messy. And anyone who has searched for a toy in the heap knows how complicated that is. Not to mention that the whole process of borrowing memory isn't particularly fast - it's just a lot of memory.",
    "p8a1": "big",
    "p8a2": "small",
    "p8a3": "orderly",
    "p8a4": "very fast",
    "p8tq": "The heap is:",
    "p9h": "Stack",
    "text": "Where you will learn what is the connection between buscuits and memory",
    "title": "Lesson 7"
  },
  "l8": {
    "p10p": "The languages that will be used here are Java (\"java\") and C# (\"c sharp\"). They are two of the most used languages worldwide. They are also very similar at the surface level. Both are somewhere between C and Python as a level.",
    "p11p": "What is unique about Java is that it is both compiled and interpreted. Every Java program is first compiled into something called byte code. This code is distributed as a program. In order to run it, the computer it is on must have Java installed. At startup, the JVM (Java virtual machine) takes the byte code and starts interpreting it. This allows Java a speed similar to that of compiled languages and the ability to run on any computer with an available JVM installed.",
    "p12p": "C# is similar. It is first compiled to a language called IL. When run on another computer, the .NET Common Language Runtime (\"read dot net...\") compiles it a second time, this time to machine code, and runs it. This allows it to be fast like a compiled language, but also to run on any computer running the .NET Common Language Runtime.",
    "p13p": "However, programming languages are not simple. And we can't just write them in Notepad - it would be too time consuming. That's why IDEs (\"Integrated development environment\") exist. They are text editors that allow you to quickly change open files, try to predict what code you'll write, try to fix your mistakes, help you find them yourself, and usually have a run button so you don't have to remember the long console commands required to compile and run code. However, they are just that - they can't change the language, can't cause errors in your code on their own, etc.",
    "p14p": "Programming starts from the next lesson, so choose which language you will follow - C# or Java. It doesn't really matter since you can always learn the other one.",
    "p15p": "Did you choose?",
    "p16p": "If you have chosen Java, you have two choices for IDEs - Eclipse and IDEA, which I use. For beginners, I recommend Eclipse, but if you want, you can also start right away with IDEA.",
    "p17p": "If you have chosen C#, you have only one choice - Visual Studio.",
    "p18p": "Below I will explain the process of installing everything you need and starting a project.",
    "p19ds1": "Eclipse",
    "p1p": "What is a programming language? A programming language is a language that is used to write programs, obviously. Programming languages are synthetic, artificial, constructed and created by humans - they are alike. They are very similar. Almost every language has the concepts of almost every other language. and in most cases, even the words are the same - like our spoken languages of the Latin family, or the Germanic family, or the Slavic family. As long as you know one language in the family, the others are much less of a hindrance. And one bonus of programming languages is that they have about 100 words each, not 1000 pages of words like normal languages. What I want to tell you is that the programming language doesn't really matter. It's the concepts that are important. And for the rest of this \"course\" you will learn most of them. After that you will be free to use any programming language.",
    "p2p": "Programming languages have their beginnings a long time ago. Originally, processors had to be given commands written with punchholes on cards - a hole meant 0 and a space meant 1. Then, someone invented Assembly, the first \"real\" programming language. It wasn't much above zeros and ones though - it was just that commands were written in text, not numbers, which was a huge improvement. And it is specific to each processor architecture - can you imagine writing the same program 3 times for 3 different architectures?",
    "p3p": "Then a miracle happens. \"C\" (\"its\") appears - the first modern programming language! It has most of the features that every other modern programming language has. But so long ago - in 1972! It was a revolution - at last, code more like something written nowadays. And you can write code once and create programs from it for multiple architectures.",
    "p4p": "However, \"C\" is not just roses. The language leaves the programmer to control their memory. Which is very good if you understand what you're doing, and very bad if you don't, because you create code full of memory leaks and problems.",
    "p5p": "Today a very large part of the world continues to run C. And its successor - C++. Even the operating system you use is probably written in them.",
    "p6p": "The languages mentioned so far are low level - they are close to the computer - they give the programmer control over memory and get compiled directly to computer commands. This happens thanks to a compiler. A compiler is a program that \"translates\" (compiles) source code to code corresponding to a (usually) lower-level language that performs the same actions. For example, C compiles to machine code. The machine code can then be distributed and run on the computer.",
    "p7p": "Since the creation of C, many languages have been created, have become popular, and have even disappeared - BASIC, Visual Basic, COBOL, Fortran (this one is still used in mathematics). Many still exist - Java, C#, Python, Perl, Ruby, Javascript. And new languages appear all the time - Kotlin, Go, Rust, Typescript.",
    "p8p": "Languages such as Java and C# are high level - they are simpler, more controlled, and do not allow memory control - typically each chunk of memory is stored on the heap with an address in the stack. Occasionally, a program in the language called a \"garbage collector\" is run through the heap to check if the memory chunks have an address stored somewhere in the stack. If they don't, they are deleted. Automatically. Primitive types (int, short, long, float, double, char, boolean, which we'll cover in later lessons) are usually saved directly on the stack when they are local (not class members - you'll understand later).",
    "p9p": "There are also languages like Python. It's best described by the old joke that making a house with Assembly is like cutting your own wood and building the house, with C you have the wood, you just have to build, and with Python the house gets delivered to you ready. Python is an interpreted language. That means that to run a program with it, you have to install the language on your computer. When you run the program, the interpreter starts reading the file on the fly - this makes the language slower, but allows it to run anywhere - if Python can be installed on the machine, then any program written in it runs there.",
    "s19ds2": "IDEA",
    "s19ds3": "Visual Studio",
    "s19p": "You have to install Eclipse. Go to https://www.eclipse.org/downloads/",
    "s20p": "and press the Download button. You will be taken to another page. Click the download button there. Your operating system will automatically be recognized. After downloading the file, open it. A list of options will come up. You want \"Eclipse IDE for Java Developers.\" A menu will come up where you can edit the installation folder. Also, Eclipse installs Java automatically for you, so choose a version from the same menu. Then follow the installation instructions. After installation, run the program.",
    "s21p": "When the program starts, you will see a File button in the upper left corner. Click it and select New. Then select Java Project. A window will pop up for you to name your project - choose a Latin name. Try not to have any blank spaces in the name. Click Finish. Your project will appear in the left panel. It will have two things underneath it - JRE System Library and src. You are only interested in src. Right-click on src and select New from the menu that appears. Then choose Package. This is a package and you will find out its function later. Give it a name, in lower case, in Latin and click Finish. The newly created package will appear. Select it and right-click it. The menu will appear again. Again, select New. This time on New, select Class. Choose a name that starts with a capital letter and is in Latin. No blank spaces. At the bottom you will see an option to tick \"public static void main(String[] args)\". Click on it so that the squiggle appears. Press Finish. You've just created your first Java file! There should be something like this in front of you:",
    "s22cj": "package hello;\n\npublic class Hello {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n}",
    "s23p": "Edit it, so it becomes:",
    "s24cj": "package hello;\n\npublic class Hello {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello world!\");\n\t}\n\n}",
    "s25p": "Above, find a green, round icon with a triangle inside. Click it. Click OK if it asks you something. A console will open below. It should say \"Hello World!\". You have run your first program. Bravo!",
    "s26p": "You have to install IDEA. Go to https://www.jetbrains.com/idea/download/",
    "s27p": "and click the Download button below the Community text. The download will start. Then run the file and follow the installation instructions.",
    "s28p": "Run the program. It may ask you a few questions about the mode (light or dark).",
    "s29p": "A menu will come up. Select New Project. On the left, make sure Java is selected. From the menu on the right, select Project SDK. A list will come up. Click Download JDK. Click Download on the new menu. This will download Java for you, automatically. Click Next at the bottom right. Press Next until the Project name menu appears. Type your project name, in Latin, with no blanks. Press Finish. The project will open. You'll see a few things on the left. You're interested in the src folder. Right-click on src and choose New from the menu that appears. Then choose Package. This is a package and you'll find out its function later. Give it a name, in lower case, in Latin and press Enter. The newly created package will appear. Select it and right-click it. The menu will appear again. Again, select New. This time on New, select Java Class. Choose a name that starts with a capital letter and is in Latin. No blank spaces. Press Enter to finish. You have just created your first Java file! You should have something like this in front of you:",
    "s30cj": "package hello;\n\npublic class Hello {\n}",
    "s31p": "Edit it, so it becomes:",
    "s32cj": "package hello;\n\npublic class Hello {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello world!\");\n    }\n}",
    "s33p": "Right-click on the text. A menu will open. From it, select Run.",
    "s34p": "A console will open down below. It should say \"Hello World!\". You have run your first program. Bravo!",
    "s35t": "Fun Fact: Notice the text above \"Hello World!\". This is the command needed to run the code. It starts with the path to Java. Then there are other settings and the path to the file you've run. The IDE saves you typing something like this to run a file.",
    "s36w": "At the time of writing this, Visual Studio is only available for Windows.",
    "s37p": "You have to install Visual Studio. Go to https://visualstudio.microsoft.com/downloads/",
    "s38p": "and click the Free Download button below the Community text. The file will download. Run it. Press Continue until a menu with the title Workloads appears. Select .Net desktop development. You can install other packages later. Click Install. Wait for the installation to complete. You may be prompted to restart your computer. Do it. Then start Visual Studio. You will be asked questions about the mode (light or dark). Choose whichever you want. A menu will then appear. On the right, select the Create a new project option. The menu will change to one titled Create a new project. Under the languages menu (first rectangle on the top right), select C#. At the bottom, select Console App (.NET Core). Click Next. Select a project name under Project Name. It should be in Latin and start with a capital letter, no blanks. Click Create. A new project will open. It will have a Program.cs file open. Find the file on the left. Right-click. A menu will appear. Click Delete and then OK. Click on the project name on the left and right-click it. Click Add from the menu and then click New item. A menu will appear. Select Class. At the bottom, type a name, in Latin, starting with a capital letter, with no blanks. It must end in .cs, so don't edit the extension. Click Add. Something similar will appear:",
    "s39cc": "using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Tutorial\n{\n    class Hello\n    {\n    }\n}",
    "s40p": "Edit it, so it becomes:",
    "s41cc": "using System;\n\nnamespace Tutorial\n{\n    class Hello\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello world!\");\n        }\n    }\n}",
    "s42p": "Above there should be a rectangle with the project name and a green triangle. Click it and select the project name. The console will open in a black window. It should say \"Hello World!\". You have run your first code. Bravo!",
    "text": "Where you will find out what you will learn",
    "title": "Lesson 8"
  },
  "l9": {
    "p15p": "Result in the console:",
    "p16con": "<<output>>How are you?\n<<output>>OK. How are you from 5 to 10?\n<<output>>5I have had better days",
    "p17p": "You notice the merge on the last line. Can you explain it?",
    "p18p": "That was printing to the console. Now we need to talk about variables. Variables have the ability to change. Every non-satiric programming language has variables. They are how memory is used. They always follow this formula:",
    "p19pc": "num = 5; //num comes from number",
    "p1p": "In the last lesson we printed to the console. Each program has a main method. You'll find out what a method is later. The program always starts from the main method. That means, we will write our code inside.",
    "p20p": "Then, forward in the code, num can be used. For example:",
    "p21pc": "print(num); // In this language, assume that printing is done with print - this would print 5\n// the practice itself is called pseudocode - code that is not in any language, but instead combines several for ease of writing and explanation",
    "p22p": "Here num is the name and 5 is the value",
    "p23p": "Variables are named differently in almost every language, but almost always follow certain rules:",
    "p24p": "Names are always one word",
    "p25p": "Names cannot contain anything other than letters, digits and \"_\" or \"-\"",
    "p26p": "Words that the language uses (e.g. class) cannot be variables",
    "p27p": "A variable name cannot start with a number - the explanation for this is simple - if it can start with a number, the name can be a number. This can create a situation like:",
    "p28pc": "6 = 5",
    "p29p": "And then if we have print(6);, the language will wonder whether to print 6 or 5. So, it's just not allowed.",
    "p2ds1": "Java",
    "p30p": "There are also some naming standards.",
    "p31p": "In Java and C#, most variables are named with camelCase. Here, the first letter of the first word is lowercase, and the first letter of each subsequent word is uppercase, and all words are merged. For example:",
    "p32pc": "nameOfVariableInCamelCase = 5;",
    "p33p": "For some other things (like classes), PascalCase is used. There, the first letter of each word is capitalized and all words are merged. For example:",
    "p34pc": "NameOfVariableInPascalCase = 5;",
    "p35p": "There is also snake_case. There all letters are lowercase and each word is separated by an underscore - \"_\". For example:",
    "p36pc": "name_of_variable_in_snake_case = 5;",
    "p37e": "Always use Latin letters when typing out variable names!",
    "p38p": "Also, always give meaningful names to variables. After compilation they will be a few random letters anyway, so in the original write them explanatory:",
    "p39p": "Probably not a good idea to name like that:",
    "p40pc": "r = 5; // this is supposed to be the radius of a circle",
    "p41p": "It would be more readable that way:",
    "p42pc": "radiusCircle = 5;",
    "p43p": "So the next person, or you yourself, will immediately know that this is the radius of a circle, not of the pyramids of Giza",
    "p44p": "I have to also tell you about variable types. What you are looking at so far is a \"common\" language. In it, the variables themselves know what they contain. But in Java and C# this is not the case. Every variable has a type. The type determines what kind of information the variable will contain. This ensures that we won't try to store both text and later a number in a variable. The first type you will learn is Integer (an integer type) - or abbreviated, as it is in languages, int. The integer type contains integers - 56 is an integer, so it can be such a type, but 56.78 is not.",
    "p45p": "int is 4 bytes in size in almost any language. 4 bytes is 32 bits, so the largest possible int would be 4,294,967,295. However, the first of these bits is reserved for the sign - \"+\" or \"-\". That means, an int can contain numbers from -2,147,483,648 to 2,147,483,647.",
    "p46p": "Besides int, there are two other integer types - short and long. short has two bytes - 16 bits. The first is a sign, so short can contain numbers between -32,768 and 32,767. Long on the other hand is long - it has 8 bytes - 64 bits. Even with its first bit used for a sign, it can contain the numbers between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807.",
    "p47p": "It is normal to use int unless you are sure you have small numbers - then use short. If you have inadequately large numbers, use long.",
    "p48p": "In some languages there are also so-called \"unsigned\" types. These are usually written as uint, ushort, ulong. In these, the first bit is not used as a sign, i.e. uint can contain numbers from 0 to 4,294,967,295. We won't discuss them further, but it's nice to know they're there.",
    "p49a1": "1 byte",
    "p49a2": "4 bits",
    "p49a3": "4 bytes",
    "p49a4": "8 bytes",
    "p49tq": "int is big:",
    "p50p": "Let's get to the code:",
    "p51pc": "int num = 5; // This creates a variable with integer type. The type is before the variable name\nint num = 5.56 // This would give us an error because 5.56 is not an integer.\n// If we have created int num = 5;, we can change it later. When we change it, we don't write down the type.",
    "p52ds1": "Java",
    "p55p": "Result in the console:",
    "p56con": "<<output>>5\n<<output>>6\n<<output>>5",
    "p57p": "If we write the type while changing the value, the programming language will decide that we are creating a new variable. It will then see that there is already a variable with that name and give us an error.",
    "p58e": "Each variable in a block of code must have a unique name relative to each variable above it.",
    "p59p": "For example:",
    "p5p": "\"//\" means comment. When we write it on a line in the program, the rest of that line is no longer code; it is a comment that the program does not read. It is deleted during compilation. The idea is to be able to explain what a piece of code does next to the code itself. Remember, you don't use a comment to describe what you've done - that's obvious whether you're reading a file or removing the last character of a file. In a comment, describe why you did the thing - you're reading a file to load settings, or you're removing the last character to avoid causing an error. These are non-obvious things .For very complex logic that cannot be split into functions and classes, you can use a comment to describe what is happening.",
    "p60pc": "int num = 5; // Create / initialize the variable\nint num = 6; // The error is here - we will get an error that there is already a variable with that name - the program will stop, or \"crash\".",
    "p61p": "The variables of the other types are created in the same way:",
    "p62pc": "shortNum = 1;\nlong longNum = 900000000000; //Group separators are not normally allowed in a number; 9.000.000 would cause an error.",
    "p63p": "In addition, we can create multiple variables of the same type on one line as follows:",
    "p64pc": "int x = 5, y = 6;",
    "p65p": "The code creates two integer variables x and y, where x has value 5 and y has value 6.",
    "p6pc": "/* This is a comment on more than one line. It doesn't end until */",
    "p7w": "A semicolon at the end of each line of code - \";\"",
    "p8p": "You also may have noticed {} - those brackets denote a new block of code. Notice that each block of code goes further right into the field - either one tab or three blank spaces. In Java, when we start a new block, we write the opening bracket { on the same line. In C#, we write it on the next line. Notice that both places have main(String[] args) / Main(string[] args). It's important to note that in Java main is lowercase and String is uppercase, but in C# it's the other way around. This \"args\" thing contains the arguments given to the program in the console. Remember? Those things that are written like \"-argument value\". The rest of the code is also needed for the program to function. Let's see how it prints to the console in both languages:",
    "p9ds1": "Java",
    "s10p": "Here it is:",
    "s11cj": "package hello;\n\npublic class Hello {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"How are you?\");\n\t\tSystem.out.print(\"OK. \");\n\t\tSystem.out.println(\"How are you from 5 to 10?\");\n\t\tSystem.out.print(5);\n\t\tSystem.out.print(\"I have had better days\");\n\n\t}\n\n}",
    "s12cc": "Console.WriteLine() // This prints and then adds one line - comes from write line\nConsole.Write() // This prints but does not add a line. Console.WriteLine() uses this, \n//only it adds one \"\\n\" character at the end to show a new line. Do you remember that that was the newline character?",
    "s13p": "Here it is:",
    "s14cc": "using System;\n\nnamespace Tutorial\n{\n    class Hello\n    {\n        static void Main(string[] args)\n        {\n\t\tConsole.WriteLine(\"How are you?\");\n\t\tConsole.Write(\"OK. \");\n\t\tConsole.WriteLine(\"How are you from 5 to 10?\");\n\t\tConsole.Write(5);\n\t\tConsole.Write(\"I have had better days\");\n\n        }\n    }\n}",
    "s2ds2": "C#",
    "s3cj": "package hello;\n\npublic class Hello {\n\n\tpublic static void main(String[] args) {\n\t\t// We write our code here\n\t}\n\n}",
    "s4cc": "using System;\n\nnamespace Tutorial\n{\n    class Hello\n    {\n        static void Main(string[] args)\n        {\n            // We write our code here\n        }\n    }\n}",
    "s52ds2": "C#",
    "s53cj": "int num = 5; // Create / initialize the variable\nint secondNum = num; // Variables can be equal to other variables and take their current value\nSystem.out.println(num);\nnum = 6; // We change the value of the variable. The type is not written.\nSystem.out.println(num);\nSystem.out.println(secondNum);",
    "s54cc": "int num = 5; // Create / initialize the variable\nint secondNum = num; // Variables can be equal to other variables and take their current value\nConsole.WriteLine(num);\nnum = 6; // We change the value of the variable. The type is not written.\nConsole.WriteLine(num);\nConsole.WriteLine(secondNum);",
    "s9cj": "System.out.println() // This prints and then leaves a line - comes from print line\nSystem.out.print() // This prints but does not leave a line. System.out.println() uses this, \n//only it adds one\"\\n\" character at the end to show a new line. Do you remember that was the newline character?",
    "s9ds2": "C#",
    "text": "Where you will see code for the first time",
    "title": "Lesson 9"
  },
  "t1": {
    "p10a1": ".docx files",
    "p10a2": "HTML",
    "p10a3": "YAML",
    "p10tqc": "XML is not used for:",
    "p11a1": "key-value",
    "p11a2": "information - size",
    "p11a3": "value - explanation",
    "p11a4": "file - value",
    "p11tqc": "JSON follows the model...",
    "p12a1": "changes the directory",
    "p12a2": "creates a file",
    "p12a3": "deletes the directory",
    "p12a4": "deletes a files",
    "p12tqc": "The command \"cd\":",
    "p13a1": "are expected to have more than one result",
    "p13a2": "are a sequence of actions",
    "p13a3": "the actions change at every execution",
    "p13a4": "Every execution doesn't work",
    "p13tqc": "For algorithms it is true that:",
    "p14a1": "Yes",
    "p14a2": "No",
    "p14tqc": "ROM is energy dependent.",
    "p15a1": "Yes",
    "p15a2": "No",
    "p15tqc": "ROM is energy dependent.",
    "p16a1": "Yes",
    "p16a2": "No",
    "p16tqc": "Apps load in the RAM.",
    "p17a1": "chaotic",
    "p17a2": "orderly",
    "p17tqc": "The heap is:",
    "p18a1": "Yes",
    "p18a2": "No",
    "p18tqc": "We can remove an element from the stack even if there is another element above it.",
    "p19a1": "leak of memory",
    "p19a2": "memory leak",
    "p19fqc": "What happens when we lose the address of a block of memory in the heap without having marked it as free?",
    "p1a": "245",
    "p1fqc": "Convert the binary number 1111 0101 to decimal.",
    "p20fqc": "Try to summarize what you have learned in the previous section in a few sentences.",
    "p2a": "1000 1000",
    "p2fqc": "Convert the decimal number 136 to binary.",
    "p3a": "91",
    "p3fqc": "Calculate 1011 1010 - 0010 0100, knowing that both numbers are binary. Write down the result as a number in base 16.",
    "p4a": "22",
    "p4fqc": "Calculate 1011 multiplied by 10, knowing that both numbers are binary. Write down the result as a decimal number.",
    "p5a1": "Coordinates",
    "p5a2": "Colors",
    "p5a3": "Units of measurement",
    "p5a4": "Arithmetic operations",
    "p5tqc": "Where are hexadecimal numbers used most commonly?",
    "p6a1": "Yes",
    "p6a2": "No",
    "p6tqc": "Does ASCII support Cyrillic?",
    "p7a1": "It stores the most commonly used characters using 4 bits",
    "p7a2": "It stores the most commonly used characters using 8 bits",
    "p7a3": "It stores the most commonly used characters using 2 bytes",
    "p7a4": "It stores the most commonly used characters using 8 bytes",
    "p7tqc": "What optimization does UTF-8 use to efficiently store all characters?",
    "p8a1": "Previous directory",
    "p8a2": "Current directory",
    "p8a3": "Current file",
    "p8a4": "Working directory",
    "p8tqc": "The relative path \"../\" means:",
    "p9a1": "doesn't helps file organization",
    "p9a2": "isn't a part of the file's name",
    "p9a3": "doesn't indicate what program should open the file",
    "p9a4": "doesn't limit what program can open the file",
    "p9tqc": "The extension of a file:",
    "text": "Where you will check your computer knowledge",
    "title": "Test 1"
  },
  "t2": {
    "p10a1": "it can store twice as large numbers as long",
    "p10a2": "it is twice as big as float",
    "p10a3": "it is twice as small as float",
    "p10a4": "none of the above",
    "p10tqc": "double is named that way, because:",
    "p11a1": "f",
    "p11a2": "float",
    "p11a3": "a",
    "p11a4": "l",
    "p11tqc": "What should be placed after a number to indicate that it is of type float:",
    "p12pc": "int num = 10;\nint num1 = 12;\nint num2 = 13;\nint num3 = num++ - ++num1 + num2--;",
    "p13a1": "9",
    "p13a2": "10",
    "p13a3": "11",
    "p13a4": "12",
    "p13tqc": "After executing the code above, num3 will be equal to:",
    "p14a1": "00010100",
    "p14a2": "00101000",
    "p14a3": "01010010",
    "p14a4": "00101001",
    "p14tqc": "If x is a binary number equal to 10100101, then x >> 3 will be equal to:",
    "p15a1": "Right",
    "p15a2": "Wrong",
    "p15tqc": "You can add variables of type int to variables of type char.",
    "p16a1": "i",
    "p16a2": "n",
    "p16a3": "g",
    "p16a4": "r",
    "p16tqc": "The fifth character in the string \"strings\" is:",
    "p17a1": "Right",
    "p17a2": "Wrong",
    "p17tqc": "Strings can be concatenated with integers.",
    "p18a1": "contain code that usually has a common goal",
    "p18a2": "contain code that usually doesn't have a common goal",
    "p18a3": "are standard",
    "p18a4": "always come with the programming language and cannot be added",
    "p18tqc": "Libraries in programming:",
    "p19a1": "-10",
    "p19a2": "-16",
    "p19a3": "10",
    "p19a4": "5",
    "p19tqc": "In Java and C#, the equation (6*5-4*20) / 5 is equal to:",
    "p1a": "are natural",
    "p1a2": "are created by humans",
    "p1tqc": "Programming languages:",
    "p20fqc": "Try to summarize what you have learned in the previous section in a few sentences.",
    "p2a": "Yes",
    "p2a2": "No",
    "p2tqc": "One of the first programming languages is Python.",
    "p3a1": "errors in code",
    "p3a2": "bugs",
    "p3a3": "crashes",
    "p3a4": "memory leaks",
    "p3tqc": "Garbage collector ensures the absence of:",
    "p4a1": "Yes",
    "p4a2": "No",
    "p4tqc": "Interpretation happens every time a file in an interpreted language is executed:",
    "p5a1": "translates one programming language to another",
    "p5a2": "fixes errors",
    "p5a3": "happens when a bytecode file is opened",
    "p5a4": "none of the abve",
    "p5tqc": "Compilation:",
    "p6a1": "4 bytes",
    "p6a2": "2 bytes",
    "p6a3": "1 bytes",
    "p6a4": "8 bytes",
    "p6tqc": "Integers usually have a size of:",
    "p7a1": "It is not",
    "p7a2": "As one of the bits",
    "p7a3": "As one of the bytes",
    "p7a4": "none of the above",
    "p7tqc": "How is the sign for positivity or negativity stored for variables of type short?",
    "p8a1": "it has uses a lot of bits",
    "p8a2": "the name is long",
    "p8a3": "the name is ironic",
    "p8a4": "none of the above",
    "p8tqc": "\"long\" is named that way, because:",
    "p9a1": "a bit is not lost for storing the sign",
    "p9a2": "a bit is not lost for storing the direction of the number",
    "p9a3": "there are no unsigned types",
    "p9a4": "unsigned types do not differ in size from normal types",
    "p9tqc": "Unsigned types can store larger numbers because:",
    "text": "Where you will check your ability to store information",
    "title": "Test 2"
  },
  "t3": {
    "p10a1": "324",
    "p10a2": "387",
    "p10a3": "156",
    "p10a4": "5",
    "p10tqc": "After executing the above code, the result in the console will be:",
    "p11h": "Exercises",
    "p12p": "The next 2 questions are tasks you have to do yourself.",
    "p13rq": "Create a program for users to log into an organization. When the user starts the program, they should be asked to enter their name, age and an even number in the console. When the user enters this information, check three things - that their name is over 0 characters long (learn how to get a string's length), that their age is over 0, and that the number they entered is even. If all three conditions are met, display \"Welcome, <name the user entered>\" on the console. Otherwise, display \"Wrong information\".",
    "p14rq": "Try to do the previous task, but this time accept two different first names (first and last), gender instead of age, with gender entered by String and a random three-digit number (you have to check if the number is three-digit).",
    "p15fqc": "Опитай да си обобщиш какво научи в предния раздел в няколко изречения.",
    "p1a1": "1 possible value",
    "p1a2": "2 possible values",
    "p1a3": "3 possible values",
    "p1a4": "4 possible values",
    "p1tqc": "The type boolean has:",
    "p2a1": "true",
    "p2a2": "false",
    "p2tqc": "The statement 5 != 6 is:",
    "p3a1": "true",
    "p3a2": "false",
    "p3tqc": "The statement 7 <= 7 is:",
    "p4a1": "true",
    "p4a2": "false",
    "p4tqc": "The statement \"!(56 == 7 || 8 < 9) && 7 > 6\" is:",
    "p5pc": "int result = (5 < 6)? 7: 8;",
    "p6a1": "7",
    "p6a2": "8",
    "p6a3": "5",
    "p6a4": "6",
    "p6tqc": "After executing the above code, the variable \"result\" will be equal to:",
    "p7pc": "int num = 7;\nfloat num1 = 7.6f;\nstring result = \"”;\nif (num == num1) {\n\tresult = \"Equal”;\n}\nelse if (num < num1) {\n\tresult = \"The first is smaller”;\n}\nelse {\n\tresult = \"The second is smaller”;\n}",
    "p8a1": "Equal",
    "p8a2": "The first is smaller",
    "p8a3": "The second is smaller",
    "p8a4": "None of the above",
    "p8tqc": "After executing the above code, the variable \"result\" will be equal to:",
    "p9pc": "int num = 5;\nswitch (num) {\ncase 1:\n\tprint(num * 65 - 1);\n\tbreak;\ncase 2:\n\tprint(num * 78 - 3);\n\tbreak;\ncase 15:\n\tprint(num * 32 - 4);\n\tbreak;\ndefault:\n\tprint(num);\n\tbreak;\n}",
    "text": "Where you will test your ability to control a program",
    "title": "Test 3"
  },
  "t4": {
    "p10con": "-10",
    "p11p": "Result:",
    "p12con": "-10\n-5\n0",
    "p13h": "Exercise 2",
    "p14rq": "Create a program that chooses a random number x with a maximum value of 20. Then create a loop that at each iteration selects a new random number y with a maximum value of 20 and stops when y equals x. Output how many iterations the loop went through in the console.",
    "p15p": "Example:",
    "p16p": "Result:",
    "p17con": "10 iterations",
    "p18h": "Exercise 3",
    "p19rq": "Create a program that accepts a string from the console. If the string is equal to the keyword \"enter\", output \"You are logged in\" and let the program complete. If the string does not equal the keyword, output \"Wrong word. Try again. X tries remain\" and allow the user to re-enter a word. x is a number indicating how many tries remain. The maximum number of tries is 10. When the user exceeds the allowed number of tries, let the program finish. Use loops.",
    "p1p": "This is a more unique test. It consists of tasks only, i.e. there are no questions with a circle and none of the tasks can be checked. Your task is to press the end button when you are ready. Good luck!",
    "p22h": "Exercise 4",
    "p23rq": "Use loops to make a program that calculates the factorial of a number and outputs it to the console. The factorial of the number 3 is 3*2*1 = 6.",
    "p24p": "Example:",
    "p25p": "Input:",
    "p26con": "6",
    "p27p": "Output:",
    "p28con": "720",
    "p29p": "(found using 6*5*4*3*2*1)",
    "p2h": "Exercise 1",
    "p30h": "Exercise 5",
    "p31rq": "Knowing the following things:",
    "p32p": "The little Latin \"a\" corresponds to the code 97",
    "p33p": "\"b\" corresponds to the code 98",
    "p34p": "The capital Latin \"A\" corresponds to the code 65 (the difference between \"A\" and \"a\" is 32 positions)",
    "p35p": "\"B\" corresponds to code 66",
    "p36p": "Every other letter in the English alphabet is stored according to the same rules",
    "p37p": "There are 26 letters in the English alphabet",
    "p38p": "Display the entire English alphabet in the console using loops, in the following format:",
    "p39p": "Example:",
    "p3rq": "The absolute value of a number is its distance to 0, so the absolute value of 5 is 5 and the absolute value of -7 is 7. Create a program that accepts an integer x from the console. If the number is a multiple of 5, output it and all other numbers with an absolute value less than its that are multiples of 5. Remember that there are negative numbers. Use loops.",
    "p40p": "Result:",
    "p41con": "A a\nB b\nC c\nD d\nE e\nF f\nG g\nH h\n<<prefix>>… // Други букви - няма да напиша цялата английска азбука в пример\nX x\nY y\nZ z",
    "p42p": "Good luck!",
    "p43p": "Did you solve the problems before pressing end? I hope so. Without practice, programming doesn't work.",
    "p4p": "Example:",
    "p5p": "Input:",
    "p6con": "10",
    "p7p": "Result:",
    "p8con": "10\n5\n0",
    "p9p": "Input:",
    "text": "Where you will test your ability to repeat",
    "title": "Test 4"
  },
  "t5": {
    "p10rq": "Create an array of size 100 000 elements. Fill it with random numbers between 0 and 100. Then sort it isomg all the methods I've shown you, not forgetting the ones from the standard library. Measure the program execution time (or read it in your IDE) with each different method. If there is no difference between the methods, just add one or more zeros to the array size. Look for and try other sorting methods.",
    "p11h": "Exercise 3",
    "p12rq": "Create a program that accepts an integer from the console and then an array the size of the number entered. If a perfect square is a number whose square root is an integer, output to the console the sum of all the numbers in the array that are perfect squares. Don't forget to use the language's standard library!",
    "p13p": "Example:",
    "p14p": "Input:",
    "p15con": "3\n25\n5\n49",
    "p16p": "Output:",
    "p17con": "74 // Here perfect squares are 25 and 49 - so 25+49 = 74",
    "p18h": "Exercise 4",
    "p19rq": "Create a matrix with 5 columns and 5 rows. Take 25 integers from the console and fill the matrix with them. Find the sum of all the numbers in the first and last rows of the matrix. Draw a table to represent this. Multiply the found sum by the sum of all the numbers in the first and last columns. Print the result to the console.",
    "p1p": "It's exercise time. Don't forget to use all available resources. You may find the tasks difficult (probably because they are), but I have tried to make them as interesting as possible. Good luck!",
    "p20h": "Exercise 5",
    "p21rq": "Accept 6 integers between 1 and 50 from the console. Store them in an array x. Then generate 6 random numbers between 1 and 50 and store them in another array y. Output the numbers from y to the console. Then check how many matches there are between the numbers in array x and array y. If the matches are 0, 1 or 2, output \"No win\". Otherwise, output accordingly:",
    "p22p": "3 correct - \"Three\"",
    "p23p": "4 correct - \"Four\"",
    "p24p": "5 correct - \"Five\"",
    "p25p": "6 correct - \"Six\"",
    "p26p": "Example:",
    "p27p": "Input:",
    "p28con": "5\n42\n3\n24\n36\n20",
    "p29p": "Output:",
    "p2h": "Exercise 1",
    "p30con": "Numbers drawn: 36, 43, 5, 1, 3, 15\nThree",
    "p3rq": "Create a program that accepts from the console an integer, an array of integer type and size the entered number and character - +, - or *. Output the sum (+), difference (-), or product (*) of all the numbers in the input array according to the character.",
    "p4p": "Example:",
    "p5p": "Input:",
    "p6con": "5 // Array size\n3\n4\n7\n8\n10\n+ // Character",
    "p7p": "Output:",
    "p8con": "22 // The sum of the numbers",
    "p9h": "Exercise 2",
    "text": "Where you will test your ability to work with a lot of information",
    "title": "Test 5"
  },
  "t6": {
    "p10p": "bread",
    "p11p": "(the \"e\" in bed is replaced by \"rea\", turning the string into \"bread\")",
    "p12h": "Exercise 2",
    "p13rq": "A prime number is a number that is divisible without remainder only by 1 and itself - e.g. 5. Create a function that checks if a number is prime, called isPrime (IsPrime in C#). The function takes an integer x as an argument and returns a boolean - true if the number is prime, false otherwise.",
    "p14h": "Exercise 3",
    "p15rq": "Create a function that takes an integer as an argument and prints it and all numbers from it to 0 in the console, stopping at 1. Remember what an absolute value is. Use recursion.",
    "p16p": "Example:",
    "p17p": "Arguments:",
    "p18p": "5",
    "p19p": "Output:",
    "p1p": "You know what to expect. Good luck!",
    "p20con": "5\n4\n3\n2\n1",
    "p21h": "Exercise 4",
    "p22rq": "Create a function that takes a string as an argument and returns it as an array of characters. Then create a function that takes an array of characters as an argument and returns the sum of the numeric values of all the characters in the array.",
    "p23p": "Example:",
    "p24p": "Function 1:",
    "p25p": "Arguments:",
    "p26p": "yes",
    "p27p": "Returns:",
    "p28p": "['y', 'e', 's']",
    "p29p": "Function 2:",
    "p2h": "Exercise 1",
    "p30p": "Arguments:",
    "p31p": "['a', 'b']",
    "p32p": "Returns:",
    "p33p": "195 (the sum of 'a' и 'b')",
    "p34h": "Exercise 5",
    "p35rq": "Create a function that takes an integer as an argument and returns the sum of its digits.",
    "p36p": "Example:",
    "p37p": "Arguments:",
    "p38p": "127",
    "p39p": "Returns:",
    "p3rq": "Create a function that takes as arguments the string \"original\", the string \"replacement\" and the index x and returns a new string \"replaced\". \"replaced\" is the string \"original\", but the character at the index x is replaced with the string \"replacement\". If the index x is not in the string \"original\" (e.g., x = 5 and \"original\" is 5 characters long), return null. Use substrings.",
    "p40p": "10",
    "p41p": "(10 = 1+2+7)",
    "p4p": "Example:",
    "p5p": "Arguments:",
    "p6p": "original = \"bed\"",
    "p7p": "index = 1",
    "p8p": "replacement = \"rea\"",
    "p9p": "Returns:",
    "text": "Where you'll check how organised you are",
    "title": "Test 6"
  },
  "t7": {
    "p10p": "Действия:",
    "p11con": "x = 10\naddition 5, subtraction 3, multiplication 4, division 3, square root\nx = 4",
    "p12p": "Bonus - add a static method that takes 3 doubles a, b, c and solves a quadratic equation with them. It returns an array with the results - empty if there is no x, with 1 element if there is only 1 solution and with two elements if there are 2 solutions.",
    "p13h": "Exercise 4",
    "p14rq": "Create a House class that has properties like: number of floors, number of windows, number of rooms, style (modern, renaissance - I would recommend enumeration), square footage, etc. Then apply an override to the .toString()/.ToString() method so that it returns a string in the form \"House with <number of floors> floors, <number of windows> windows, <number of rooms> rooms in <style> style, large <square footage> sq. ...<other properties>\".",
    "p15p": "Create a getPrice()/GetPrice() method that calculates the price of the house and returns it. The formula is as follows:",
    "p16p": "Selected price per square * square footage",
    "p17p": "Bonus: Make it so that when there is only 1 window, floor, etc. the string says \"...1 window...\" instead of \"...1 windows...\"",
    "p18h": "Exercise 5",
    "p19rq": "Create a Library class that has a class variable of type array of books with the size accepted in the constructor. The array is initialized in the constructor. There is an .add()/.Add() method that adds a book to the last free space and returns true if there is free space and false if there is not, a .empty()/.Empty() method that empties the array, a .getSize()/.GetSize() method that returns how many books are in the array, a . getBooks()/.GetBooks(), which returns all available books in a new array of exact size, and .getBookByAuthor()/.GetBookByAuthor(), which takes an author name and returns all books that have the same author in an array.",
    "p1p": "This test symbolizes the end of your \"academic\" training. At the time of writing this, after the last few topics, in the syllabus you are expected to do GUIs. I'm not going to get into that because I believe you should figure them out on your own. From this test on, the lessons will present things outside the syllabus and also some additional knowledge from me. Following are 5 exercises to cover most of the material up to this point. Good luck!",
    "p20t": "The last task has a rather long condition and it's understandable if it takes you longer to complete it. Don't forget that you already have a Book class and don't give up!",
    "p2h": "Exercise 1",
    "p3rq": "Create a Cipher class. It has two static methods - encipher and decipher. Both methods accept a string and a key integer k. Implement a simple Caesar cipher in the methods. Once the class is ready, create a main method in another class to test with. Accept an integer from the console. If 0, accept a string and a number and output the cipher string. If it is 1, accept a string and a number and output the decrypted string. For any other integer, ask for input again. Use the Internet.",
    "p4h": "Exercise 2",
    "p5rq": "Create a class \"WeatherForecast\" that accepts a season (enum element) and an hour in its constructor (the hour is an integer - e.g. 12 or 23, 25 is not a valid hour) and generates a random forecast according to the given arguments. For example, summer, 14 - 36 degrees, 0% humidity, feels like 40 degrees. Each of these forecast properties have their own getters.",
    "p6t": "Instead of doing a lot of checking, try using arithmetic - for example, you start with a starting value of 0 degrees, \"summer\" adds 35 degrees and 14:00 adds 7 degrees.",
    "p7h": "Exercise 3",
    "p8rq": "Create a Calculator class that accepts a double x in its constructor and has non-static methods for addition, subtraction, multiplication, division and square root. The add, subtract, multiply, and divide methods each accept one other double with which to perform the action. The square root method accepts no arguments. All methods perform their action, store the new value of x in the class, and return the new value of x. There is a getter and a setter for x.",
    "p9p": "Example:",
    "text": "Where you will test your knowledge of software architecture",
    "title": "Test 7"
  },
  "t8": {
    "p10p": "My point is that you don't need to start right away. But when you see an opportunity, when you have an idea, when the muse comes to you - try it. You won't lose anything, even your time, because no matter what you do, you will have learned something and you will have more experience than before.",
    "p11p": "Good luck!",
    "p1p": "There are no questions or exercises in this test.",
    "p2p": "Okay, there is a task. Otherwise it technically wouldn't  be a test. Practice on your own. Pick something and create a project. Intentum is coming to an end, and soon you'll be faced with the choice of quitting or moving on. You should already have the theoretical knowledge, meaning the only way to continue is to write real code in real projects.",
    "p3p": "There are only two ways to get interested in a personal project.",
    "p4p": "One is to have a ready reason for the project. My first project was a card game in Java because I had seen it somewhere and was interested in remaking it. I've already told you the story of how that turned out. However, I learned a lot from that program and it was only my first attempt, so I'm not complaining.",
    "p5p": "The second way is for the project to solve some problem of yours.",
    "p6p": "In 2020 we switched to e-learning. There was no platform ready, so we organized a Discord server as students. There were problems, but it was especially annoying that in the conversations we always forgot to leave the class. Time was passing and we even missed inter-lessons. This, of course, was unacceptable. Teachers also complained about students not being present. This, of course, was not so unacceptable. Then I got the idea to create a Discord bot. A few days later, I had a Python bot that I started at the beginning of the day and it automatically entered the conversation and played a recording of a bell. Prior to that, I had no knowledge of either Discord or Python and the code was largely spaghetti stuck together with chewing gum and duct tape. Later I added a time tracking part in lessons (the results of which I never once gave to a teacher, but that's another topic) that had even worse code and was problematic for nearly 2 months before I fixed it. The whole adventure was like fighting air, but it was fun. It's been almost 2 years since then. We don't use Discord now, we have different teachers on everything, the library I used to create the bot isn't supported and I'm probably a bit better as a programmer. However, the knowledge from those months still remains.",
    "p7p": "My first site was for a school project. I tried to redesign my school's website. It turned out to be an \"interesting\" result that ultimately didn't replace the real site, but it was absolutely worth it just for the educational part.",
    "p8p": "Later I made a drawing site because I didn't want to run a program on my computer, and I needed to scribble something quick and ad-free. I know, the height of laziness. The project was supposed to take 2 weeks, ended up taking towards 2 months, which I probably should have expected with over a year of experience by then.",
    "p9p": "And now I'm creating Intentum because I was complaining that there are no good, accessible sources for programming in Bulgarian. It's quite ironic since you are reading the English translation but whatever.",
    "text": "Where you will test yourself",
    "title": "Test 8"
  }
}